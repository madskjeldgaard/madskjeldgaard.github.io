<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raspberrypi on Mads Kjeldgaard</title>
    <link>http://madskjeldgaard.dk/tags/raspberrypi/</link>
    <description>Recent content in raspberrypi on Mads Kjeldgaard</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Thu, 11 Jun 2020 16:49:29 +0200</lastBuildDate>
    
	<atom:link href="http://madskjeldgaard.dk/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi 4: Simple Button to OSC example in Rust</title>
      <link>http://madskjeldgaard.dk/posts/raspi-4-gpio-button-rust/</link>
      <pubDate>Thu, 11 Jun 2020 16:49:29 +0200</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/raspi-4-gpio-button-rust/</guid>
      <description>Today I did a small experiment with my Raspberry Pi 4: I wanted to poll the GPIO data pins and use data from them in SuperCollider. This is best done by polling the pins in a separate program and then sending that data to SuperCollider via OSC.
I have done this in Python before but I much prefer doing this kind of thing in Rust since the latter is fast and safe (and just generally: I love Rust!</description>
    </item>
    
    <item>
      <title>Networked audio using Raspberry Pi 4 (zita-njbridge and SuperCollider)</title>
      <link>http://madskjeldgaard.dk/posts/raspi-zita-njbridge/</link>
      <pubDate>Sun, 03 May 2020 10:17:27 +0200</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/raspi-zita-njbridge/</guid>
      <description>Jack is an incredibly flexible piece of software for making audio connections. It&amp;rsquo;s mostly used to connect and patch virtually within one computer but it has a range of amazing extra features for connecting things in alternative ways.
This is exploited to it&amp;rsquo;s fullest in the zita-njbridge package.
To quote from the manual on zita-njbridge:
 The zita-j2n (sender) and zita-n2j (receiver) applications allow to exchange up to 64 channels of full-quality uncompressed audio streams between two or more systems running the Jack audio server.</description>
    </item>
    
    <item>
      <title>Notes for setting up a Raspberry Pi 4 for audio work</title>
      <link>http://madskjeldgaard.dk/posts/raspi4-notes/</link>
      <pubDate>Thu, 30 Apr 2020 16:07:22 +0200</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/raspi4-notes/</guid>
      <description>These are notes for setting up a Raspberry Pi 4 single board computer for pro audio work. Specifically for running SuperCollider programs for interactive installations.
I used Raspbian Lite for this, since my intention is to run the Raspberry Pi in headless mode, meaning using no display and no desktop environment (to save resources).
It is presumed that you have installed Raspbian on an SD card, with ssh enabled (allowing you to log in to the pi over the network and execute commands using a terminal), and that you are logged in.</description>
    </item>
    
  </channel>
</rss>