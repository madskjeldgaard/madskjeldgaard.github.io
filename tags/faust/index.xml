<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>faust on Mads Kjeldgaard</title>
    <link>http://madskjeldgaard.dk/tags/faust/</link>
    <description>Recent content in faust on Mads Kjeldgaard</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Fri, 16 Apr 2021 16:08:27 +0200</lastBuildDate><atom:link href="http://madskjeldgaard.dk/tags/faust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Faust for SuperCollider</title>
      <link>http://madskjeldgaard.dk/posts/getting-started-with-faust-for-supercollider/</link>
      <pubDate>Fri, 16 Apr 2021 16:08:27 +0200</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/getting-started-with-faust-for-supercollider/</guid>
      <description>I recently started toying around with Faust. Faust is a functional programming language specifically designed for audio manipulation. One of the many strengths of Faust is it&amp;rsquo;s compiler backends that allows the user to compile Faust code to almost any end target - including microcontrollers, JUCE/VST plugin projects, Pure Data, Max and SuperCollider - with the same Faust code. It even works in the browser.
Another fantastic strength is the library of building blocks it comes with - these are extremely high quality and reflect a lot of the new developments in DSP technology and research in recent years.</description>
    </item>
    
  </channel>
</rss>
