<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Mads Kjeldgaard</title>
    
    
    
    <link>http://madskjeldgaard.dk/tags/cpp/</link>
    <description>Recent content in cpp on Mads Kjeldgaard</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 26 Jan 2021 13:39:45 +0100</lastBuildDate>
    
	<atom:link href="http://madskjeldgaard.dk/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mutable Instruments dev environment on Arch Linux</title>
      <link>http://madskjeldgaard.dk/posts/mutable-dev/</link>
      <pubDate>Tue, 26 Jan 2021 13:39:45 +0100</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/mutable-dev/</guid>
      <description>
        
          
          
          
        
        
        
          Mutable Instruments is an absolutely amazing synthesizer company that produces open source hardware with open source firmware on it. I have several of these and I love poking around in the firmware.
The company has even open sourced it&amp;rsquo;s development environment which on most systems may be setup in a virtual machine.
But this is not so easy on Arch Linux, since these virtual machines rely on old(er) kernels, and I am always on bleeding edge kernel versions on my development laptop, so I decided to setup my own little development environment for hacking Mutable Instruments (and similar) firmwares directly in Arch with no virtual machines used and it seems to work quite nicely.
          
        
        </description>
    </item>
    
    <item>
      <title>NeoVim setup for c&#43;&#43; and openFrameworks development</title>
      <link>http://madskjeldgaard.dk/neovim-setup-for-c-and-openframeworks-development/</link>
      <pubDate>Mon, 06 Apr 2020 15:44:23 +0000</pubDate>
      
      <guid>http://madskjeldgaard.dk/neovim-setup-for-c-and-openframeworks-development/</guid>
      <description>
        
          
          
          
        
        
        
          It is possible to get a nice development environment on Linux (and other platforms) using NeoVim and a few plugins and settings.
This dev environment includes snippets, autocomplete, debugging and smart code suggestions for methods.
I got a lot of pointers for this setup from Chendi Xueâ€™s blogpost about Vim/CPP development.
So, without further ado here are my notes for setting up shop using YouCompleteMe, UltiSnips and some formatting plugins.
          
        
        </description>
    </item>
    
    <item>
      <title>A midi controller in a box of screws</title>
      <link>http://madskjeldgaard.dk/posts/master-volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://madskjeldgaard.dk/posts/master-volume/</guid>
      <description>
        
          
          
          
        
        
        
          I recently built version 2 of a &amp;ldquo;master volume control&amp;rdquo; midi controller that I had made before. This version is slightly improved on the former.
It is very cheap and simple. It revolves around the wonderful and cheap (11$) Teensy LC.
Bill of materials includes:
 A 10k potentiometer A button A Teensy LC A box (I used a leftover box that had contained some wood screws - perfect size!) A few wires  All code and notes for building may be found here.
          
        
        </description>
    </item>
    
  </channel>
</rss>