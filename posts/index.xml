<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Mads Kjeldgaard</title>
        <link>http://madskjeldgaard.dk/posts/</link>
        <description>Recent content on Mads Kjeldgaard</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Tue, 14 Apr 2020 10:41:44 +0200</lastBuildDate>
        <atom:link href="http://madskjeldgaard.dk/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Raspberry Pi 4: Simple Button to OSC example in Rust</title>
            <link>http://madskjeldgaard.dk/posts/raspi-4-gpio-button-rust/</link>
            <pubDate>Thu, 11 Jun 2020 16:49:29 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/raspi-4-gpio-button-rust/</guid>
            <description>Today I did a small experiment with my Raspberry Pi 4: I wanted to poll the GPIO data pins and use data from them in SuperCollider. This is best done by polling the pins in a separate program and then sending that data to SuperCollider via OSC.
I have done this in Python before but I much prefer doing this kind of thing in Rust since the latter is fast and safe (and just generally: I love Rust!</description>
            <content type="html"><![CDATA[<p>Today I did a small experiment with my Raspberry Pi 4: I wanted to poll the GPIO data pins and use data from them in SuperCollider. This is best done by polling the pins in a separate program and then sending that data to SuperCollider via OSC.</p>
<p>I have done this in Python before but I much prefer doing this kind of thing in Rust since the latter is fast and safe (and just generally: I love Rust!).</p>
<p>I concocted a small example of this.</p>
<p><a href="https://github.com/madskjeldgaard/gpio-osc-button">https://github.com/madskjeldgaard/gpio-osc-button</a></p>
]]></content>
        </item>
        
        <item>
            <title>Setting up Vim and YouCompleteMe for Rust development</title>
            <link>http://madskjeldgaard.dk/posts/rust-ycm/</link>
            <pubDate>Thu, 11 Jun 2020 11:07:41 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/rust-ycm/</guid>
            <description>These are notes for setting up YouCompleteMe - a program for autocompletion, code linting and debugging in the text editor Vim - for developing Rust programs. I find this program vital to my Rust workflow because it allows me to more easily explore code and correct mistakes before they reach the compiler. YouCompleteMe will tell you if there are syntactic mistakes in your code, it will tell you about unused variables and code and it will often suggest changes to problematic code.</description>
            <content type="html"><![CDATA[<p>These are notes for setting up <a href="https://github.com/ycm-core/YouCompleteMe">YouCompleteMe</a> - a program for autocompletion, code linting and debugging in the text editor Vim - for developing Rust programs. I find this program vital to my Rust workflow because it allows me to more easily explore code and correct mistakes before they reach the compiler. YouCompleteMe will tell you if there are syntactic mistakes in your code, it will tell you about unused variables and code and it will often suggest changes to problematic code.</p>
<h2 id="install-the-plugin">Install the plugin</h2>
<p>I am assuming here that you have both <code>git</code> and Vundle installed for NVim.</p>
<p>In Nvim, install YouCompleteMe by adding the plugin to your init.vim-file by executing <code>:e $MYVIMRC</code>.</p>
<p>Then, after <code>call plug#begin()</code> and before  <code>call plug#end()</code> add this line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;ycm-core/YouCompleteMe&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Then re-source the init file by running the command <code>:source $MYVIMRC</code> and then install the plugin using <code>:PlugInstall</code>.</p>
<h2 id="install-completion">Install completion</h2>
<p>Next up we need to install the completion engines needed. You can cherry-pick the engines you need or do not need but I honestly just install it all.</p>
<p>This is done by going into the plugin folder of YouCompleteMe in a terminal, again assuming you are using Vundle for your plugins this will probably be:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd ~/.vim/plugged/YouCompleteMe/
./install.py --all
</code></pre></div><p>This will take a while to install.</p>
<p>Once that&rsquo;s done, there is a final step which is quite strange and hopefully it will change in the future. According to <a href="https://github.com/ycm-core/YouCompleteMe/wiki/Full-Installation-Guide">the full installation guide</a>, you need to install <a href="https://www.rustup.rs">rustup</a> if you haven&rsquo;t already.</p>
<p>Then we need to get toolchains and add them to YouCompleteMe.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># Temporarily redirect rustup to be able to extract the source</span>
RUSTUP_HOME<span style="color:#f92672">=</span>~/rusttmp

<span style="color:#75715e"># Get the tools</span>
rustup toolchain install nightly
rustup default nightly
rustup component add rls rust-analysis rust-src
cd $RUSTUP_HOME/toolchains
</code></pre></div><p>Now you should be in the toolchains folder that you just downloaded. There should be a folder there named something depending on your system (on mine it&rsquo;s <code>nightly-x86_64-unknown-linux-gnu</code> because I&rsquo;m on linux). Move into it using <code>cd &lt;folder_name&gt;</code>.</p>
<p>Then, move the contents of the folder of your YouCompleteMe installation <code>~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/rls</code>.</p>
<p>Check that you did it correctly by seeing the contents:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ls ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/rls
</code></pre></div><p>This should return something like
<code>bin  etc  lib  share</code></p>
<h2 id="extra-configuration">Extra configuration</h2>
<p>I am actually not sure this is necessary anymore but I read somewhere that you need to enable Rust features in YouCompleteMe&rsquo;s extra configuration file.</p>
<p>Do this by adding this line to your <code>init.vim</code> file:</p>
<p><code>let g:ycm_global_ycm_extra_conf = '~/.config/nvim/global_extra_conf.py'</code></p>
<p>Then edit the config file in NVim by executing <code>:tabnew ~/.config/nvim/global_extra_conf.py</code>.</p>
<p>Here is what mine looks like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Settings</span>(<span style="color:#f92672">**</span>kwargs):
    <span style="color:#66d9ef">if</span> kwargs[<span style="color:#e6db74">&#39;language&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;rust&#39;</span>:
        <span style="color:#66d9ef">return</span> {
            <span style="color:#e6db74">&#39;ls&#39;</span>: {
                <span style="color:#e6db74">&#39;rust&#39;</span>: {
                    <span style="color:#75715e"># &#39;features&#39;: [&#39;http2&#39;, &#39;spnego&#39;],</span>
                    <span style="color:#e6db74">&#39;all_features&#39;</span>: True,
                    <span style="color:#e6db74">&#39;racer_completion&#39;</span>: True,
                    <span style="color:#75715e"># &#39;all_targets&#39;: False,</span>
                    <span style="color:#75715e"># &#39;wait_to_build&#39;: 1500,</span>
                }
            }
        }
</code></pre></div><h2 id="keybindings">Keybindings</h2>
<p>Here are the keybindings I use for Rust/YouCompleteMe:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; YCM KEYBINDINGS</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">function</span>! <span style="color:#a6e22e">YcmStuff</span>() <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">si</span> :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GoToDefinition</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">sk</span> :<span style="color:#a6e22e">YcmRestartServer</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> &lt;<span style="color:#a6e22e">F1</span>&gt; :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">FixIt</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">K</span> :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GetDoc</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> ; :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GetType</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">endfunction</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">function</span>! <span style="color:#a6e22e">Rusty</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">nnoremap</span> &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">e</span>&gt; :<span style="color:#a6e22e">terminal</span> <span style="color:#a6e22e">cargo</span> <span style="color:#a6e22e">run</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">inoremap</span> &lt;<span style="color:#a6e22e">C</span>-<span style="color:#a6e22e">e</span>&gt; &lt;<span style="color:#a6e22e">esc</span>&gt;:<span style="color:#a6e22e">terminal</span> <span style="color:#a6e22e">cargo</span> <span style="color:#a6e22e">run</span>&lt;<span style="color:#a6e22e">cr</span>&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">endfunction</span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">augroup</span> <span style="color:#a6e22e">rust</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">autocmd</span>!<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#a6e22e">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">rust</span> <span style="color:#a6e22e">call</span> <span style="color:#a6e22e">Rusty</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	<span style="color:#a6e22e">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">rust</span> <span style="color:#a6e22e">call</span> <span style="color:#a6e22e">YcmStuff</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">augroup</span> <span style="color:#a6e22e">end</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="ultisnips">UltiSnips</h2>
<p>I use these configuration lines to make UltiSnips work with YouCompleteMe to be able to use snippets as well as autocompletion.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; YouCompleteMe and UltiSnips compatibility.</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_use_ultisnips_completer</span> = <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_key_list_select_completion</span>=[]<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_key_list_previous_completion</span>=[]<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Expand snippets from UltiSnips with tab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsExpandTrigger</span>=<span style="color:#e6db74">&#34;&lt;Tab&gt;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsJumpForwardTrigger</span>=<span style="color:#e6db74">&#34;&lt;Tab&gt;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsJumpBackwardTrigger</span>=<span style="color:#e6db74">&#34;&lt;c-tab&gt;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsSnippetDirectories</span> = [<span style="color:#e6db74">&#39;UltiSnips&#39;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Interview with Passive/Aggressive</title>
            <link>http://madskjeldgaard.dk/posts/interview-pa-2020/</link>
            <pubDate>Sat, 06 Jun 2020 14:11:05 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/interview-pa-2020/</guid>
            <description>At the beginning of the Covid-19 crisis the Danish artist Claus Haxholm reached out to me to do an interview by email. It turned out to be a lengthy email exchange which resulted in an interview available on the Danish music website Passive/Aggressive.
In the interview (which is in Danish unfortunately) I talk about the brain, morphology, Norway, time and different speculative subjects related to computer music, as well as my Vortex system.</description>
            <content type="html"><![CDATA[<p>At the beginning of the Covid-19 crisis the Danish artist Claus Haxholm reached out to me to do an interview by email. It turned out to be a lengthy email exchange which resulted in an interview available on the Danish music website <a href="http://passiveaggressive.dk">Passive/Aggressive</a>.</p>
<p>In the interview (which is in Danish unfortunately) I talk about the brain, morphology, Norway, time and different speculative subjects related to computer music, as well as my Vortex system.</p>
<p>Read the interview <a href="http://passiveaggressive.dk/feature/mads-kjeldgaard-claus-haxholm-en-korrespondance/">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Control voltage and SuperCollider: Using the open source module Ornament &amp; Crime as a midi-cv interface</title>
            <link>http://madskjeldgaard.dk/posts/hemisphere/</link>
            <pubDate>Sun, 24 May 2020 10:10:40 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/hemisphere/</guid>
            <description>My Ornament &amp;amp; Crime build (the Mini OC version). The USB connector on the Teensy on the back of the module has been rewired to a Neutrik USB connector attached to a panel next to it (the grey panel).
I have tried quite a few different approaches to integrating my modular synthesizer with my SuperCollider workflow and I have found most them to be disappointing, extremely expensive and or inflexible.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/oc_frontside.jpg" alt="oc">
<em>My Ornament &amp; Crime build (the Mini OC version). The USB connector on the Teensy on the back of the module has been rewired to a Neutrik USB connector attached to a panel next to it (the grey panel).</em></p>
<p>I have tried quite a few different approaches to integrating my modular synthesizer with my SuperCollider workflow and I have found most them to be disappointing, extremely expensive and or inflexible.</p>
<p>But recently, I built the <a href="https://ornament-and-cri.me/">Ornament &amp; Crime</a> eurorack module and have been very satisfied using it as a midi-cv interface with four cv inputs and four cv outputs.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://player.vimeo.com/video/421912594" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
 </div>

<p>This method has some advantages: The module and the firmware are both open source - this makes it a very sustainable choice because the community is constantly improving and expanding the possibilities with this module. This also means when you are not using it as a midi-cv interface you can pull up any of the many different applications it comes with and use it for something else. It&rsquo;s also fairly cheap to make yourself and the build process is - due to it&rsquo;s popularity and the great community - <a href="https://ornament-and-cri.me/build-it/">very well documented</a>. The disadvantage of this approach is that communication between the computer and the modular happens over midi with a value range limited to 0-127, but this may be smoothed at both ends of the signal.</p>
<h2 id="ornament--crime">Ornament &amp; Crime</h2>
<p>Ornament &amp; Crime is an open source eurorack module that serves as a DAC and ADC for <a href="https://www.pjrc.com/store/teensy32.html">the Teensy microcontroller</a>. The module has become highly popular in the DIY world and has inspired a range of derivatives in hardware (which even includes <a href="https://northernlightmodular.com/">versions for the Buchla synthesizer system</a>). The hardware and firmware for it was largely inspired by the incredible work of Émilie Gillet at <a href="https://mutable-instruments.net/">Mutable Instruments</a>, a synthesizer company with a radical open source philosophy and very free licensing for both hardware and software.</p>
<p>The reason for the OC&rsquo;s popularity can probably be traced back to the core of the module: The Teensy. With this (which is basically a very nice sort of Arduino that works really well for audio tasks), anyone can plug a USB cable into the module and start hacking at the firmware as if it was any other Arduino.</p>
<p>The firmware for the OC consists of a range of small applications <a href="https://ornament-and-cri.me/firmware/">serving purposes from signal quantization to low frequency oscillators</a>, some of which are taken from the Mutable Instruments modules mentioned above.</p>
<h2 id="hemisphere-suite-turning-the-module-into-a-usb-midi-controller">Hemisphere Suite: Turning the module into a USB midi controller</h2>
<p>However, recently an alternative to the &ldquo;stock&rdquo; firmware for the OC has appeared: <a href="https://github.com/Chysn/O_C-HemisphereSuite/wiki/Captain-MIDI">The Hemisphere Suite</a>. This firmware is an entirely different suite of applications.</p>
<p>One of these is <a href="https://github.com/Chysn/O_C-HemisphereSuite/wiki/Captain-MIDI">Captain MIDI</a> which is what allows us to do midi-cv conversion between the module and our computer by plugging a USB cable into the Teensy itself on the back of the board. This turns the module into a USB midi interface recognized on your computer as any kind of USB midi controller.</p>
<p><img src="/img/small/oc_backside.jpg" alt="oc"></p>
<p>Note: Make sure you have at least v.1.8A installed - the previous versions of Captain MIDI had a nasty buffer overflow bug making the module crash at high load.</p>
<h2 id="controlling-the-module-with-supercollider">Controlling the module with SuperCollider</h2>
<p>Since the module is now recognized as a midi controller by the computer, we can address it as such in SuperCollider. I use <a href="https://github.com/ModalityTeam/Modality-toolkit">The Modality Toolkit</a> for all of my SuperCollider work involving controllers. The Modality package is basically a large library and framework for doing amazing things with controllers by using them in a <em>modal</em> way making interface setup and reconfiguration fairly easy. It comes with support for a bunch of controllers, and the list of supported ones is constantly growing.</p>
<p>I added support for the Ornament &amp; Crime module with the Hemisphere Suite installed.</p>
<p>To use it, install or update Modality in SuperCollider:</p>
<pre><code>Quarks.gui;
</code></pre><h3 id="setting-up-captain-midi-on-the-hemisphere">Setting up Captain MIDI on the Hemisphere</h3>
<p>On the module, open up the app &ldquo;Captain MIDI&rdquo; and enter the setup screen.</p>
<p>The Hemisphere/Captain MIDI description in Modality assumes that you are using it with 4 Mod midi signals going in and out. Set this up on the module like so:</p>
<p>In the screen that says &ldquo;MIDI Assign&rdquo; at the top, change parameters to this:</p>
<pre><code>Screen: MIDI Assign
MIDI &gt; A 	Mod
MIDI &gt; B 	Mod
MIDI &gt; C 	Mod
MIDI &gt; D 	Mod
1 &gt; MIDI 	Mod
2 &gt; MIDI 	Mod
3 &gt; MIDI 	Mod
4 &gt; MIDI 	Mod
</code></pre><p>And on the setup page called &ldquo;MIDI Channel&rdquo;:</p>
<pre><code>Screen: MIDI Channel
MIDI &gt; A 	1
MIDI &gt; B 	2
MIDI &gt; C 	3
MIDI &gt; D 	4
1 &gt; MIDI 	1
2 &gt; MIDI 	2
3 &gt; MIDI 	3
4 &gt; MIDI 	4
</code></pre><h3 id="making-contact">Making contact</h3>
<p>Plug your USB cable into the back of the Teensy and in to your computer.</p>
<p>Then, in SuperCollider you can init the module as a controller:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">m</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">MKtl</span>(<span style="color:#e6db74">&#39;captain&#39;</span>, <span style="color:#e6db74">&#34;captain-midi&#34;</span>)
</code></pre></div><p>One of the nice things about Modality is that it automatically creates GUI interfaces so that you can experiment with the controllers even though they are not present.</p>
<p>Open up the GUI (and press the labels button to make it clear what is what):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">gui</span>;
</code></pre></div><p>Now you can either move the sliders for the outputs or run this code which will randomly change the four outputs on the module to random values</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// Test outputs
</span><span style="color:#75715e"></span><span style="color:#a6e22e">Tdef</span>(<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#a6e22e">outTester</span>, { 
	<span style="color:#a6e22e">loop</span>{
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">out</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>].<span style="color:#a6e22e">choose</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">rrand</span>(<span style="color:#ae81ff">0.0</span>,<span style="color:#ae81ff">1.0</span>);
		<span style="color:#e6db74">&#34;Setting output % to %&#34;</span>.<span style="color:#a6e22e">format</span>(<span style="color:#a6e22e">out</span>, <span style="color:#a6e22e">val</span>).<span style="color:#a6e22e">postln</span>;
		<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;out&#39;</span>, <span style="color:#a6e22e">out</span>).<span style="color:#a6e22e">value_</span>(<span style="color:#a6e22e">val</span>);
		<span style="color:#ae81ff">0.125</span>.<span style="color:#a6e22e">wait</span>;
	}
}).<span style="color:#a6e22e">play</span>;
</code></pre></div><p>Alternatively, set them manually</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// Manually set outputs
</span><span style="color:#75715e"></span><span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;out&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>).<span style="color:#a6e22e">value_</span>(<span style="color:#ae81ff">0.2</span>);
<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;out&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>).<span style="color:#a6e22e">value_</span>(<span style="color:#ae81ff">0.7</span>);
<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;out&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>).<span style="color:#a6e22e">value_</span>(<span style="color:#ae81ff">0.1</span>);
<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;out&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>).<span style="color:#a6e22e">value_</span>(<span style="color:#ae81ff">0.9</span>);
</code></pre></div><p>Now, plug signals into the four inputs on the module and have them control four feedback sine wave synths in SuperCollider:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// Map cv inputs 
</span><span style="color:#75715e"></span>[<span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>].<span style="color:#66d9ef">do</span>{<span style="color:#f92672">|</span><span style="color:#66d9ef">in</span>, <span style="color:#a6e22e">in_num</span><span style="color:#f92672">|</span>
	<span style="color:#a6e22e">Ndef</span>(<span style="color:#66d9ef">in</span>, {<span style="color:#f92672">|</span><span style="color:#a6e22e">freq</span><span style="color:#f92672">=</span><span style="color:#ae81ff">424</span>, <span style="color:#a6e22e">feedback</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0.65</span>, <span style="color:#a6e22e">amp</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0.5</span>, <span style="color:#a6e22e">pan</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">|</span> 
		<span style="color:#a6e22e">Pan2</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">SinOscFB</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">freq</span>, <span style="color:#a6e22e">feedback</span>, <span style="color:#a6e22e">amp</span>), <span style="color:#a6e22e">pan</span>)
	}).<span style="color:#a6e22e">play</span>;
	
	<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">elAt</span>(<span style="color:#e6db74">&#39;in&#39;</span>, <span style="color:#66d9ef">in</span>).<span style="color:#a6e22e">action_</span>({<span style="color:#f92672">|</span><span style="color:#a6e22e">el</span><span style="color:#f92672">|</span>
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">value</span>;
		<span style="color:#a6e22e">Ndef</span>(<span style="color:#66d9ef">in</span>).<span style="color:#a6e22e">set</span>(<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#a6e22e">freq</span>, <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">linexp</span>(<span style="color:#ae81ff">0.0</span>,<span style="color:#ae81ff">1.0</span>,<span style="color:#ae81ff">40.0</span>,<span style="color:#ae81ff">5000.0</span>))
	});
};
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Networked audio using Raspberry Pi 4 (zita-njbridge and SuperCollider)</title>
            <link>http://madskjeldgaard.dk/posts/raspi-zita-njbridge/</link>
            <pubDate>Sun, 03 May 2020 10:17:27 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/raspi-zita-njbridge/</guid>
            <description>Jack is an incredibly flexible piece of software for making audio connections. It&amp;rsquo;s mostly used to connect and patch virtually within one computer but it has a range of amazing extra features for connecting things in alternative ways.
This is exploited to it&amp;rsquo;s fullest in the zita-njbridge package.
To quote from the manual on zita-njbridge:
 The zita-j2n (sender) and zita-n2j (receiver) applications allow to exchange up to 64 channels of full-quality uncompressed audio streams between two or more systems running the Jack audio server.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/raspi-and-cheap-usb-interface.jpg" alt="raspberry pi with a 1$ usb sound interface"></p>
<p><a href="https://jackaudio.org/">Jack</a> is an incredibly flexible piece of software for making audio connections. It&rsquo;s mostly used to connect and patch virtually within one computer but it has a range of amazing extra features for connecting things in alternative ways.</p>
<p>This is exploited to it&rsquo;s fullest in the <a href="https://packages.debian.org/jessie/sound/zita-njbridge">zita-njbridge</a> package.</p>
<p>To quote from the manual on zita-njbridge:</p>
<blockquote>
<p>The  zita-j2n (sender) and zita-n2j (receiver) applications allow to
exchange up to 64 channels of full-quality uncompressed audio streams between
two or more systems running the Jack audio server. Sender and receiver(s)
can each have their own sample rate and period size, and no word clock sync
between them is assumed. The receiver uses adaptive resampling to convert
the audio stream(s) to its local sample rate.</p>
</blockquote>
<p>With this tiny piece of extra software you can make audio connections between computers across a network. This way, it&rsquo;s possible to stream full quality audio from one computer to another for networked audio projects.</p>
<p>I have previously used this technique to connect my Linux laptop to a Windows audio server <a href="https://notam.no">in Notam&rsquo;s 3D-audio studio</a> to work around the problem of missing drivers for good multichannel audio interfaces on Linux and instead stream the audio over the network to a computer that is able to connect to an interface.</p>
<p>I have - to my own surprise - had great results with this (working with 25 channels of audio) so I have been really curious about what can be done on the powerful Raspberry Pi 4 in this regard.</p>
<p>Note, this post exemplifies how to do this with a Raspberry Pi but it could be any two (or more) computers that have jack installed.</p>
<p><strong>Important:</strong> Do not try this over wifi. Wifi will cause significant dropouts in the audio. To get good results, a wired ethernet connection is mandatory (on both the Raspberry Pi and the laptop). Also, make sure that the laptop receiving the audio is not running on wifi concurrently with the wired ethernet connection.</p>
<p><img src="/img/small/usb-ethernet.jpg" alt="usb ethernet dongle">
<em>If your computer doesn&rsquo;t have an ethernet port you can buy cheap usb adapters that will give you one.</em></p>
<h2 id="workflow-overview">Workflow overview</h2>
<p>I am doing this on a Raspberry Pi 4 with both the Pi and my laptop connected to the same network using an ethernet cable.</p>
<p>You need the ip address of your laptop (or whatever computer is receiving the audio on the network). I won&rsquo;t go into details on how to do this because it varies wildly from operating system to operating system, but I will assume you know the local ip address of your receiving computer.</p>
<p>We will be working with the Pi running in headless mode using Raspbian Lite. For more information on how to setup that up, <a href="/posts/raspi4-notes">see this post</a>.</p>
<p>Running the Pi in headless mode poses a problem (which we will solve): We need to run multiple pieces of software at the same time on the command line. I solve this using <a href="https://github.com/tmux/tmux/wiki">tmux</a> which is a &ldquo;terminal multiplexer&rdquo;, meaning: This let&rsquo;s you run multiple windows and panes in the terminal as you would be able to in a desktop environment more or less.</p>
<h3 id="necessary-steps">Necessary steps</h3>
<p>Let&rsquo;s first take a look at the steps necessary to make this work. We&rsquo;ll go through each step below in a bit more detail and then finish off with a setup script for the Pi which does most of this for us.</p>
<h4 id="steps-on-the-raspberry-pi">Steps on the Raspberry Pi</h4>
<ol>
<li>Install dependencies</li>
<li>Launch <code>tmux</code></li>
<li>Launch <code>jack</code></li>
<li>Launch <code>zita-j2n</code> (jack 2 network)</li>
<li>Launch something that can output sound to Jack (SuperCollider in this case but might as well be Csound, Pure Data or something else)</li>
<li>Connect the virtual patch cords of your sound process&rsquo; (SuperCollider) output to the zita-j2n output.</li>
</ol>
<h4 id="steps-on-the-laptop--pc">Steps on the laptop / pc</h4>
<ol>
<li>Launch <code>jack</code></li>
<li>Launch <code>zita-n2j</code> (network 2 jack)</li>
<li>Connect input from <code>zita-n2j</code> to system output to be able to listen to it.</li>
</ol>
<h2 id="setting-up-the-raspberry-pi">Setting up the Raspberry Pi</h2>
<p>At the end of this post I will get back to <code>tmux</code> and how to launch these commands simultaneously in a terminal, but for now let&rsquo;s go through each command needed.</p>
<p>First, install dependencies:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install tmux zita-njbridge jackd2
</code></pre></div><p>Let&rsquo;s start jack on the pi using some sensible settings. Assuming your Pi has a USB audio interface connected, the hardware number (this is the <code>-dhw:1</code> bit below) should be 1. If you are using (which you shouldn&rsquo;t) the internal interface on the Pi, change this to 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># Launch jack using card 0, 48khz sample rate and block size of 256</span>
/usr/bin/jackd -dalsa -dhw:1 -r48000 -p256 -n2
</code></pre></div><p>Once jack is up and running, the next step is to run zita-njbridge.</p>
<p>zita-njbridge contains two commands:</p>
<ul>
<li><code>zita-j2n</code> - transmit audio from jack to the network (hence &ldquo;j2n&rdquo; = jack2net)</li>
<li><code>zita-n2j</code> - receive audio from the network to jack (hence &ldquo;n2j&rdquo; = net2jack)</li>
</ul>
<p>On both ends of the connection, these commands take the same arguments: an ip address and a port number.</p>
<p>Both of these commands should be the ip address and port of the receiving computer (for more information, read the manual by executing <code>man zita-njbridge</code>).</p>
<p>My laptop, which is the computer receiving the audio, has the local ip address <code>10.0.1.5</code> and for the port number, we can just make up something, how about <code>1234</code>?</p>
<p>With these two bits of information, we can launch <code>zita-j2n</code> on the Pi:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">zita-j2n 10.0.1.5 <span style="color:#ae81ff">1234</span>
</code></pre></div><p>Note, this command doesn&rsquo;t output anything, so don&rsquo;t freak out if you don&rsquo;t see anything happen in the terminal when you execute this.</p>
<h3 id="start-supercollider">Start SuperCollider</h3>
<p>As mentioned, in this example we will be using SuperCollider but any software that can run in headless mode on the Pi may be used. If you haven&rsquo;t installed it already, there are <a href="/posts/raspi4-notes">scripts for doing so here</a>.</p>
<p>From the command line, you can create a simple SuperCollider test file which will make the SuperCollider server boot and then play a stereo sine wave.</p>
<p>Using <code>echo</code> we can create a small test file in your home directory called <code>test.scd</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">		// Boot server and play stereo sine wave
</span><span style="color:#e6db74">		s.waitForBoot{
</span><span style="color:#e6db74">		play{
</span><span style="color:#e6db74">		SinOsc.ar([440, 441], mul: 0.5).poll(1)
</span><span style="color:#e6db74">	}
</span><span style="color:#e6db74">	}&#34;</span> &gt; <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/test.scd&#34;</span>
</code></pre></div><p>And then launch that same file using the SuperCollider language:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sclang $HOME/test.scd
</code></pre></div><h3 id="connect-jack">Connect jack</h3>
<p>Open up a terminal and type <code>jack_lsp</code> to see the available connections in jack.</p>
<p>These are the connections for our virtual patch cords.</p>
<p>We can connect these on the command line using the <code>jack_connect</code> command.</p>
<p>If zita-njbridge and SuperCollider are running, you should see the output of <code>jack_lsp</code> contain connection points for both of these.</p>
<p>Execute these commands to connect output 1 and 2 of SuperCollider to inputs 1 and 2 of <code>zita-j2n</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">jack_connect SuperCollider:out_1 zita-j2n:in_1 
jack_connect SuperCollider:out_2 zita-j2n:in_2
</code></pre></div><p>Make sure these commands don&rsquo;t output any errors before continuing.</p>
<h2 id="on-the-receiving-computer">On the receiving computer</h2>
<p><img src="/img/small/qjackctl-zita.png" alt="success - this is what it should look like on your host computer"></p>
<p>Then start receiving sound from zita. Note that this is the same ip and port as typed into the command in the Raspberry Pi, but the command itself is slightly different</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">zita-n2j 10.0.1.5 <span style="color:#ae81ff">1234</span>
</code></pre></div><p>This should result in a message like:</p>
<pre><code>From 10.0.1.50 : 2 chan, 44100 Hz
Resampler filter delay is 48.
Syncing...
Receiving.
</code></pre><p>If this isn&rsquo;t working, consider taking a look at your system&rsquo;s firewall to open up the port (<code>1234</code> in the example above) used here.</p>
<h3 id="patch-the-network-input-to-your-speakers">Patch the network input to your speakers</h3>
<p>Open up your jack patcher - either carla, catia or qjackctl if you are using a graphical patcher - and patch the zita object on the graph to your system&rsquo;s output.</p>
<h2 id="bringing-it-all-together-in-a-script">Bringing it all together in a script</h2>
<p>These steps may seem like a bit of a mouthful but they are easily automated.</p>
<p>As mentioned in the beginning, to be able to run multiple processes in the command line (and be able to see them), we may use <code>tmux</code>.</p>
<p>Tmux isn&rsquo;t exactly an easy program to use for beginners, but by default you may navigate it using the prefix command <code>Ctrl-b</code> followed by something else. <code>Ctrl-b 1</code> will move you to window 1, <code>Ctrl-b 2</code> window 2, etc..</p>
<p>Apart from solving the obvious problem of not being able to see multiple processes at the same time, Tmux is great for automation. We can set up and launch programs in Tmux automatically. This means we can bring together all commands from above in a setup script to be launched on the Pi. With this, we only need to launch this on the pi and it will transmit sound on the network.</p>
<p>I&rsquo;ve written a full script for this which is <a href="https://gist.github.com/madskjeldgaard/1a1e58a36f2d7526cd28524f5fd75946">available here</a>.</p>
<p>You can download this on your Pi by executing this command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Get startup script and make it executable</span>
git clone https://gist.github.com/madskjeldgaard/1a1e58a36f2d7526cd28524f5fd75946 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	mv 1a1e58a36f2d7526cd28524f5fd75946/njstart . <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	rm -rf 1a1e58a36f2d7526cd28524f5fd75946 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	chmod +x njstart
</code></pre></div><p>Using it is fairly simple. You run the script like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./njstart &lt;ipaddress&gt; &lt;port&gt; &lt;supercolliderfile&gt;
</code></pre></div><p>It has three arguments. The ip address and port of the receiving computer (your laptop) and an optional third argument for a SuperCollider file to be launched. If the third argument isn&rsquo;t supplied it will use the file in <code>~/test.scd</code> if it exists or create one if it doesn&rsquo;t.</p>
<p>Then, using the same ip address and port, run <code>zita-n2j</code> on the receiving computer to receive the audio from the Pi.</p>
<p>This is the full script:</p>
<script type="application/javascript" src="https://gist.github.com/madskjeldgaard/1a1e58a36f2d7526cd28524f5fd75946.js"></script>

<h2 id="further-information">Further information</h2>
<ul>
<li><a href="https://youtu.be/ZjIbCVujQFE">Unfa video on zita-njbridge</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Notes for setting up a Raspberry Pi 4 for audio work</title>
            <link>http://madskjeldgaard.dk/posts/raspi4-notes/</link>
            <pubDate>Thu, 30 Apr 2020 16:07:22 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/raspi4-notes/</guid>
            <description>These are notes for setting up a Raspberry Pi 4 single board computer for pro audio work. Specifically for running SuperCollider programs for interactive installations.
I used Raspbian Lite for this, since my intention is to run the Raspberry Pi in headless mode, meaning using no display and no desktop environment (to save resources).
It is presumed that you have installed Raspbian on an SD card, with ssh enabled (allowing you to log in to the pi over the network and execute commands using a terminal), and that you are logged in.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/raspi4-quad2.jpg" alt="raspberry pi 4 setup with fireface ucx and quad speakers"></p>
<p>These are notes for setting up a Raspberry Pi 4 single board computer for pro audio work. Specifically for running <a href="https://supercollider.sourceforge.net/">SuperCollider programs for interactive installations</a>.</p>
<p>I used <a href="https://www.raspberrypi.org/downloads/Raspbian/">Raspbian Lite</a> for this, since my intention is to run the Raspberry Pi in headless mode, meaning using no display and no desktop environment (to save resources).</p>
<p>It is presumed that you have installed Raspbian on an SD card, with ssh enabled (allowing you to log in to the pi over the network and execute commands using a terminal), and that you are logged in.</p>
<p>When logged in to the Pi via ssh, we can setup everything from the command line fairly quickly.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://player.vimeo.com/video/414061680" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
 </div>

<h2 id="preparing-the-pi">Preparing the Pi</h2>
<p>You may skip this step if you already have a Raspberry Pi setup with ssh and you are logged into it. Otherwise, here are the steps needed to get access to a fresh Raspbian Lite installation from another computer.</p>
<h3 id="installing-raspbian-lite">Installing Raspbian Lite</h3>
<p>To install Raspbian Lite on an SD card, plug the card in to your computer.</p>
<p>Then download the <a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Lite image.</a></p>
<p>Next, flash it onto your SD card. The easiest way to do this is by using <a href="https://www.balena.io/etcher/">Balena Etcher</a>. With this program you can open up the image for Raspbian Lite, choose the SD card and click flash.</p>
<p>Note: On some Linux systems you may need to start Balena Etcher using sudo to allow it access to the SD card.</p>
<h3 id="enable-ssh">Enable ssh</h3>
<p>With the flashed SD card containing your Raspbian Lite installation still in your computer, find the <code>boot</code> folder on it. Create an empty file here called <code>ssh</code>.</p>
<p>This will enable ssh upon boot and allow us to control the Raspberry Pi remotely.</p>
<h3 id="setup-default-wifi-network">Setup default WIFI-network</h3>
<p>To automatically connect to your WIFI network on startup, you need to add another file to the <code>boot</code> folder.</p>
<p>This one should be named <code>wpa_supplicant.conf</code> which will contain information about your network.</p>
<p>You can copy and paste the snippet below into this file, but make sure you do the following edits to it:</p>
<ol>
<li>Replace the string in the <code>ssid</code> line with the name of your network.</li>
<li>Replace the string  in the <code>psk</code> line with the password your network.</li>
<li>Replace the country code in the <code>country=NO</code> line (I am in Norway = NO).</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ctrl_interface<span style="color:#f92672">=</span>DIR<span style="color:#f92672">=</span>/var/run/wpa_supplicant GROUP<span style="color:#f92672">=</span>netdev
update_config<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
ap_scan<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
fast_reauth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
country<span style="color:#f92672">=</span>NO

network<span style="color:#f92672">={</span>
	ssid<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Your network&#39;s SSID&#34;</span>
	psk<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Your network&#39;s password/psk&#34;</span>
	id_str<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>
	priority<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Save the file, put the SD card back into your Pi and plug the power cord into it to boot it. Wait a few minutes for it to boot.</p>
<h3 id="ssh-log-in-to-your-raspbian-lite-remotely">ssh: Log in to your Raspbian Lite remotely</h3>
<p>If you followed the steps above, your Pi should now be connected to the same network as your computer.</p>
<p>To do this, you need the IP address of the Pi. See <a href="https://www.raspberrypi.org/documentation/remote-access/ip-address.md">this article which contains some nice ideas on how to do this.</a></p>
<p>Once found, you can log in from your computer by opening up a terminal and executing <code>ssh pi@address</code>, replacing &ldquo;address&rdquo; with the actual IP address. If succesful you should now be prompted for the password of the <code>pi</code> user which by default is <code>raspberry</code>.</p>
<h2 id="special-note-for-kitty-users">Special note for kitty users</h2>
<p>If on your host computer you are using <a href="https://sw.kovidgoyal.net/kitty/">kitty</a> as your terminal emulator you may experience some annoyances if you ssh using the normal <code>ssh</code> command. This is because the Pi isn&rsquo;t recognizing your terminal type.</p>
<p>You can fix this by from your computer ssh&rsquo;ing using <code>kitty +kitten ssh</code> instead.</p>
<p>I made an alias for this so that I can just type <code>kssh</code>. If you want an alias on your system, add this to your <code>$HOME/.bashrc</code> file on your computer (not the Pi) if you are using bash as your main shell or <code>$HOME/.zshrc</code> (if using zsh as your main shell):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias kssh<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;kitty +kitten ssh&#34;</span>
</code></pre></div><p>And then restart your system or resource the file using <code>source $HOME/.bashrc</code> or <code>source $HOME/.zshrc</code>.</p>
<h2 id="important-packages-and-dependencies">Important packages and dependencies</h2>
<p>Run this command to install git and perl which are important packages you will need later on.</p>
<p><code>sudo apt update &amp;&amp; sudo apt install git perl</code></p>
<p>Optionally you can install these programs as well which are nice (vim is a text editor, htop is for monitoring system resources and tmux is for multiple terminal windows). They are optional but I always use them.</p>
<p><code>sudo apt update &amp;&amp; sudo apt install vim htop tmux</code></p>
<h2 id="tuning-the-system">Tuning the system</h2>
<p>The following commands are based on <a href="https://wiki.linuxaudio.org/wiki/system_configuration">the canonical instructions for tuning your linux system for audio work.</a>. <em>Warning:</em> These will alter config files on your system, use at your own risk and only on a fresh Raspbian installation.</p>
<p>I gathered these in a handy gist, so you can execute them just by copy-pasting this (extremely long due to gist url&rsquo;s) command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://gist.github.com/madskjeldgaard/c5731e95bc5be9b3e2789b14b1149b6e <span style="color:#f92672">&amp;&amp;</span> mv c5731e95bc5be9b3e2789b14b1149b6e raspiaudiotune <span style="color:#f92672">&amp;&amp;</span> cd raspiaudiotune <span style="color:#f92672">&amp;&amp;</span> chmod +x raspiaudiotune.sh <span style="color:#f92672">&amp;&amp;</span> ./raspiaudiotune.sh <span style="color:#f92672">&amp;&amp;</span> cd ~ rm -rf raspiaudiotune
</code></pre></div><p>This is the full script:</p>
<script type="application/javascript" src="https://gist.github.com/madskjeldgaard/c5731e95bc5be9b3e2789b14b1149b6e.js"></script>

<p>To make these changes take effect, the pi must be rebooted</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo reboot
</code></pre></div><h2 id="install-and-setup-jack">Install and setup jack</h2>
<p>Jack is used to patch audio throughout your audio system on Linux. In this case we will mostly use it to patch audio from software to the hardware output.</p>
<p>Let&rsquo;s install and setup jack:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Install jack</span>
sudo apt-get install jackd2
</code></pre></div><p>Jack has a configuration file in <code>~/.jackdrc</code> that we will set up on installation, but you can edit this anytime to tune the system&rsquo;s settings using a text editor by running <code>nano ~/.jackdrc</code> for example or <code>vi ~/.jackdrc</code>. The config file consists of a <code>jackd</code> command which will be run by SuperCollider when we boot the audio server in there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Create config file in home folder called .jackdrc</span>
echo /usr/bin/jackd -P75 -dalsa -dhw:1 -r44100 -p512 -n3 &gt; ~/.jackdrc
</code></pre></div><p>Explanations of the flags used here:</p>
<ul>
<li><code>-P75</code> - the real-time priority of the audio</li>
<li><code>-dhw:1</code> signifies the device number used to connect to jack. You can get a list of available devices to choose from using <code>aplay -l</code> then change the number <code>1</code> to whatever you like. 1 is usually the USB card.</li>
<li><code>-r44100</code> is the sample rate.</li>
<li><code>-p512</code> is the block size. This can be tuned to achieve lower latency. Must be power of two. I get latencies around 3-4ms with this set to <code>-p64</code>.</li>
<li><code>-n3</code> - jack&rsquo;s buffer periods. Jack recommends using 3 here for USB devices.</li>
</ul>
<p>Additionally, <a href="https://www.fredrikolofsson.com">Fredrik Olofsson</a> pointed out to me that it can be useful to use the <code>-p</code>-flag to restrict the number of possible ports for jack to connect to, this reduces the amount of ram used, which is why the SuperCollider readme recommends adding the <code>-p16</code> flag to the jack command in <code>.jackdrc</code>.</p>
<h3 id="changing-audio-interface">Changing audio interface</h3>
<p>Never use the built in audio jack on a Raspberry Pi for anything serious. Instead, you can use any class compliant USB audio interface. These range from cheap 1$ Chinese ones to top-of-the-line RME Fireface UCX. I use and like both of these for different situations.</p>
<p>To see which audio interfaces are available on the pi:
<code>aplay -l</code></p>
<p>With a USB-interface plugged in, the output should look something like this:</p>
<pre><code>**** List of PLAYBACK Hardware Devices ****
card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]  Subdevices: 7/7
  Subdevice #0: subdevice #0
  Subdevice #1: subdevice #1
  Subdevice #2: subdevice #2
  Subdevice #3: subdevice #3
  Subdevice #4: subdevice #4
  Subdevice #5: subdevice #5
  Subdevice #6: subdevice #6
card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 IEC958/HDMI [bcm2835 IEC958/HDMI]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 0: ALSA [bcm2835 ALSA], device 2: bcm2835 IEC958/HDMI1 [bcm2835 IEC958/HDMI1]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 1: UCX23906524 [Fireface UCX (23906524)], device 0: USB Audio [USB Audio]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
</code></pre><p>Note the card number. Card 0 is the trashy jack on the pi. Card 1 is the USB audio interface.</p>
<h3 id="disable-the-on-board-audio-output">Disable the on-board audio output</h3>
<p>To disable the useless on board jack output on the raspberry pi open up the boot config file</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo vi /boot/config.txt
</code></pre></div><p>Find the line that says <code>dtparam=audio=on</code> and comment it out so that it looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#dtparam=audio=on</span>
</code></pre></div><p>Then reboot, and run <code>aplay -l</code> to verify it isn&rsquo;t there anymore.</p>
<h2 id="install-a-real-time-kernel">Install a real-time kernel</h2>
<p>One of the most important things you can do to improve any Linux system&rsquo;s audio performance is installing a real-time-kernel. On the Raspberry Pi, you need to compile this kernel yourself. <a href="https://lemariva.com/blog/2018/07/raspberry-pi-preempt-rt-patching-tutorial-for-kernel-4-14-y">There are instructions for doing so here</a>.</p>
<p>Compiling a kernel takes a lot of time, but my colleague at <a href="https://notam.no">Notam</a>, Thom Johansen, has built a <a href="http://users.notam.no/~thomj/rt-kernel-gcc_8_3_0.tar.gz">great RT-kernel for the Raspberry Pi 4 that you can download here</a>. For any other kind of Raspberry Pi, you are on your own (see the link above which has a guide for how to do this).</p>
<p><em>A big fat warning</em>: It&rsquo;s a good idea to <a href="https://thepihut.com/blogs/raspberry-pi-tutorials/17789160-backing-up-and-restoring-your-raspberry-pis-sd-card">back up your sd card at this point, if you have important data on it</a>. Screwing up the kernel installation can get you in a complicated situation.</p>
<p>If you are on a Pi 4, then proceed by executing these commands to download and install the kernel:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir rtkernel <span style="color:#f92672">&amp;&amp;</span> cd rtkernel
wget https://users.notam.no/~thomj/rt-kernel.tar.gz <span style="color:#f92672">&amp;&amp;</span> tar xzf rt-kernel.tar.gz
cd boot
sudo cp -rd * /boot/
cd ../lib
sudo cp -dr * /lib/
cd ../overlays
sudo cp -d * /boot/overlays
cd ..
sudo cp -d bcm* /boot/
</code></pre></div><p>and then add the following lines to <code>/boot/config.txt</code> by executing <code>sudo vi /boot/config.txt</code>:</p>
<pre><code>[all]
kernel=kernel7l
</code></pre><p>Then reboot the pi by executing <code>sudo reboot</code>, wait a few minutes and then ssh into the pi again.</p>
<p>If you then run <code>uname -a</code> you should get a result along these lines:</p>
<pre><code>Linux raspberrypi 4.19.71-rt24-v7l+ #2 SMP PREEMPT RT Sat Apr 25 22:04:08
UTC 2020 armv7l GNU/Linux 
</code></pre><h2 id="check-your-systems-configuration">Check your system&rsquo;s configuration</h2>
<p>If you haven&rsquo;t rebooted yet, go ahead and <code>sudo reboot</code>. And then wait for the Pi to power back up again before ssh&rsquo;ing in to continue.</p>
<p><a href="https://github.com/raboof/realtimeconfigquickscan">realTimeConfigQuickScan</a> is a really nice script that you can use to see if your system is setup correctly. Download and run it like this:</p>
<pre><code># Scan system 
git clone git://github.com/raboof/realtimeconfigquickscan.git
cd realtimeconfigquickscan
perl ./realTimeConfigQuickScan.pl
</code></pre><h2 id="download-and-compile-latest-version-of-supercollider">Download, and compile latest version of SuperCollider</h2>
<p>You can run many different kinds of software on the Raspberry Pi headless: <a href="http://fredrikolofsson.com/f0blog/?q=node/630">Pure Data</a>, Csound and SuperCollider are a few free and open source options.</p>
<p>I personally prefer SuperCollider so that&rsquo;s what I&rsquo;m going to use here.</p>
<p>The easiest way to compile and install the latest version of SuperCollider is to use <a href="https://github.com/lvm/build-supercollider">lvm&rsquo;s build scripts</a>. I created <a href="https://gist.github.com/madskjeldgaard/10ab025993d5b77d235819d56c4cc908">my own modified version</a> of them which are tailor fit to a headless Raspberry Pi install.</p>
<p>Run these scripts by executing this massive oneliner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://gist.github.com/madskjeldgaard/10ab025993d5b77d235819d56c4cc908 <span style="color:#f92672">&amp;&amp;</span> mv 10ab025993d5b77d235819d56c4cc908 scbuildscripts <span style="color:#f92672">&amp;&amp;</span> cd scbuildscripts <span style="color:#f92672">&amp;&amp;</span> chmod +x *.sh <span style="color:#f92672">&amp;&amp;</span> ./build-sc4pi.sh <span style="color:#f92672">&amp;&amp;</span> ./build-sc3-plugins-pi.sh
</code></pre></div><h3 id="testing-your-supercollider-installation">Testing your SuperCollider installation</h3>
<p>Let&rsquo;s create a simple SuperCollider test file which will boot the audio server (and automatically start and connect Jack) to see if the installation went well and we are getting sound out of the pi.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Make a SuperCollider file for testing.</span> 
echo <span style="color:#e6db74">&#34;s.waitForBoot{ play{PinkNoise.ar(0.5).dup(2)} }&#34;</span> &gt;&gt; test.scd

<span style="color:#75715e"># This will boot the server and play white noise in 2 channels</span>
<span style="color:#75715e"># Stop it by hitting Ctrl+d on your keyboard</span>
sclang test.scd
</code></pre></div><h3 id="editing-supercollider-files">Editing SuperCollider files</h3>
<p>As shown above, you can run any SuperCollider file by passing it as an argument to <code>sclang</code> on the command line.</p>
<p>If you just have a finished SuperCollider-file that you want to run, then this is probably fine. You can use any text editor to make small edits to your files (<code>vi</code>, <code>nano</code>, <code>vim</code>/<code>nvim</code> or <code>emacs</code> are popular choices).</p>
<p>But, really, this isn&rsquo;t a great way of working.</p>
<h3 id="neovim-and-scnvim">NeoVim and scnvim</h3>
<p>My preferred way of working (on any computer, single board or not) is using a combination of NeoVim and the <a href="https://github.com/davidgranstrom/scnvim">scnvim plugin</a>.</p>
<p>To get this combination to work properly, unfortunately you cannot just install NeoVim using Raspbian&rsquo;s package manager since we need a fairly new version of NeoVim to get it to work (and Raspbian/Debian typically has pretty old &ldquo;stable&rdquo; versions in it&rsquo;s package manager).</p>
<p>Follow <a href="https://github.com/neovim/neovim/wiki/Building-Neovim">the instructions here</a> (look for <code>Debian</code> things, this should be the same on Raspbian) to build NeoVim from source. The neovim wiki is the best place to find instructions on this, but I will condense the commands I used to build neovim on Raspbian below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Dependencies</span>
sudo apt-get install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip

<span style="color:#75715e"># Get the neovim source code and switch to the stable branch</span>
git clone https://github.com/neovim/neovim <span style="color:#f92672">&amp;&amp;</span> cd neovim <span style="color:#f92672">&amp;&amp;</span> git checkout stable

<span style="color:#75715e"># Build and install</span>
make -j4 <span style="color:#f92672">&amp;&amp;</span> sudo make install

<span style="color:#75715e"># Remove source files</span>
cd ..
rm -rf neovim
</code></pre></div><p>Now, verify that NeoVim is installed by running the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nvim --version
</code></pre></div><p>If you get any output from that command, you are good to go and can proceed to install <a href="https://github.com/davidgranstrom/scnvim">scnvim</a> by following the instructions on the project&rsquo;s github repo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># make a neovim config file</span> 
mkdir ~/.config/nvim
echo <span style="color:#e6db74">&#34;call plug#begin()
</span><span style="color:#e6db74">Plug &#39;davidgranstrom/scnvim&#39;
</span><span style="color:#e6db74">call plug#end()&#34;</span> &gt; ~/.config/nvim/init.vim

<span style="color:#75715e"># Install the vim-plug plugin manager</span>
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

<span style="color:#75715e"># Open nvim and install the scnvim plugin</span>
nvim -c <span style="color:#e6db74">&#34;:PlugInstall&#34;</span>
</code></pre></div><p>Exit neovim when it&rsquo;s done installing the plugin, then finish the scnvim integration by symlinking the SuperCollider classes that came with the plugin to the extensions folder of SC:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir -p $HOME/.local/share/SuperCollider/Extensions/scide_scvim
ln -sf /home/pi/.config/nvim/plugged/scnvim/sc /home/pi/.local/share/SuperCollider/Extensions/scide_scvim
</code></pre></div><p>You should now be good to go. Open up the <code>test.scd</code> file from before and edit it:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Open a SuperCollider file and start SCNvim on startup (by running the :SCNvimStart command)</span>
nvim test.scd -c <span style="color:#e6db74">&#34;SCNvimStart&#34;</span>
</code></pre></div><h2 id="controlling-the-pi-using-a-phone">Controlling the pi using a phone</h2>
<p><img src="/img/full/raspi-termux.png" alt="raspi termux"></p>
<p>If you installed ssh on your Raspberry Pi you can access it from any computer using the <code>ssh</code> program.</p>
<p>A fun thing about this is that if you have an Android phone you can also use that to access your Pi. <del>I have no idea why you would do that but it&rsquo;s not up to me to judge.</del></p>
<p><img src="/img/small/termux-ssh-arm.jpg" alt="broken arm and termux"></p>
<p><em>My friend actually used this trick to livecode SuperCollider on his Raspberry Pi while recovering from a broken arm.</em></p>
<p>To access your Raspberry Pi using your Android phone follow these steps:</p>
<p><strong>On your phone:</strong></p>
<ol>
<li>Install <a href="https://wiki.termux.com/wiki/Main_Page">termux</a>.</li>
<li>Open up Termux, type and run the following command: <code>pkg install openssh</code>. This will install ssh and let you log in to your Raspberry Pi from your phone.</li>
<li>Find the address of your Pi on the network and ssh into it in Termux using this command (change the IP to whatever the ip of your pi is):</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh pi@10.0.1.51
</code></pre></div><p>And now you&rsquo;re in your Pi on your phone and can do everything you would be able to with a computer ssh&rsquo;d into your Pi.</p>
<h2 id="using-the-raspberry-pi-for-networked-audio">Using the Raspberry Pi for networked audio</h2>
<p><a href="/posts/raspi-zita-njbridge">This blog post</a> describes a way to use the Raspberry Pi in a networked audio configuration.</p>
<h2 id="preconfigured-images">Preconfigured images</h2>
<p><a href="https://oddodd.org/">Niklas Adam</a> has done us all a favour and made preconfigured images available which are already setup for audio work. So if you don&rsquo;t feel like going through this setup process, you can simply download one of them and flash them to a card and you are good to go.</p>
<p><a href="https://oddodd.org/lib/rpi_images/images/">Download the images here.</a></p>
<p>Among other things, there are <a href="https://oddodd.org/lib/rpi_images/images/?dir=arch-arm">preconfigured images for Arch Arm </a>!</p>
<h2 id="links-for-further-information">Links for further information</h2>
<ul>
<li><a href="https://medium.com/swlh/make-your-raspberry-pi-file-system-read-only-Raspbian-buster-c558694de79">Make your Raspberry Pi file system read-only </a></li>
<li><a href="https://github.com/supercollider/supercollider/blob/develop/README_RASPBERRY_PI.md">Raspberry Pi readme in the SuperCollider repo</a></li>
<li><a href="https://hackernoon.com/raspberry-pi-headless-install-462ccabd75d0">Headless Raspberry Pi setup</a></li>
<li><a href="https://raspberrypihq.com/how-to-connect-your-raspberry-pi-to-wifi/">How to automatically connect to wifi on startup</a></li>
<li><a href="http://fredrikolofsson.com/f0blog/?q=node/630">PureData on headless Raspberry Pi</a></li>
<li><a href="http://fredrikolofsson.com/f0blog/?q=node/672">building supercollider for piCore linux</a></li>
<li><a href="http://roosnaflak.com/tech-and-research/setting-up-arch-arm-raspberry-pi-4/">Setting up Arch Arm on Raspberry Pi 4</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Awesome SuperCollider: A curated list</title>
            <link>http://madskjeldgaard.dk/posts/awesome-sc/</link>
            <pubDate>Thu, 30 Apr 2020 12:57:31 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/awesome-sc/</guid>
            <description>A while ago I started compiling a list of links to SuperCollider based things that I found interesting and wanted to save for later.
The list grew and at one point I organized it all in one public repository where the SuperCollider community could help curate links to awesome SuperCollider things and it has since then become a truly rich resource for things like tutorials, reading material, nice projects and tools.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/chaos-algo.png" alt="chaos algo"></p>
<p>A while ago I started compiling a list of links to SuperCollider based things that I found interesting and wanted to save for later.</p>
<p>The list grew and at one point I organized it all in one public repository where the SuperCollider community could help curate links to <em>awesome SuperCollider things</em> and it has since then become a truly rich resource for things like tutorials, reading material, nice projects and tools.</p>
<p>Have a look, and do add to it if you feel like it:</p>
<p><a href="https://github.com/madskjeldgaard/awesome-supercollider">Awesome SuperCollider</a></p>
]]></content>
        </item>
        
        <item>
            <title>On Rust, OSC and creative coding in nannou</title>
            <link>http://madskjeldgaard.dk/posts/nannou-osc-guides/</link>
            <pubDate>Sun, 26 Apr 2020 15:02:49 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/nannou-osc-guides/</guid>
            <description>Nannou is a relatively new framework for creative coding ⨪ kind of like processing, openFrameworks and cinder.
A creative coding framework usually consists of a cluster of tools for working creatively with audio, visuals, robotics, lasers and many other things in one coding framework, and nannou is no different.
The great thing about nannou is that it is a framework making use of the cool new systems programming language Rust.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/nannou-psych-square1.png" alt="alt"></p>
<p><a href="https://nannou.cc">Nannou</a> is a relatively new framework for creative coding ⨪ kind of like processing, openFrameworks and cinder.</p>
<p>A creative coding framework usually consists of a cluster of tools for working creatively with audio, visuals, robotics, lasers and many other things in one coding framework, and nannou is no different.</p>
<p>The great thing about nannou is that it is a framework making use of the cool new systems programming language <a href="https://www.rust-lang.org/">Rust</a>.</p>
<p>Rust is both extremely effective and has memory safety by design. This is great and makes it a fantastic choice for programming digital art. One of my favourite features of the programming language is the very strict compiler which makes it very hard for you to compile code containing errors. That, and an easy to use packaging system sort of like NPM and really good documentation engines makes it a lot of fun to explore ideas in code and easy to share those ideas as well.</p>
<p>I have recently become involved in the nannou project which makes it a lot easier to harness the power of Rust for creative purposes.</p>
<p>I have contributed a few tutorials to the project, covering subjects of animation, open sound control (OSC) and how to use the framework with other software (like <a href="supercollider.sourceforge.net/">supercollider</a>) via the latter.</p>
<p><a href="https://guide.nannou.cc/">Go check it out in the nannou guide.</a>:</p>
<ul>
<li><a href="https://guide.nannou.cc/tutorials/draw/animating-a-circle.html">Animating a circle</a></li>
<li><a href="https://guide.nannou.cc/tutorials/osc/osc-introduction.html">An intro to OSC</a></li>
<li><a href="https://guide.nannou.cc/tutorials/osc/osc-sender.html">Sending OSC</a></li>
</ul>
<p>If you are curious about my own experiments, a lot of my nannou sketches <a href="https://github.com/madskjeldgaard/nannou-sketches">can be found here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>SoX tutorial: SoX on Android</title>
            <link>http://madskjeldgaard.dk/posts/sox-tutorial-sox-on-android/</link>
            <pubDate>Sun, 26 Apr 2020 10:21:42 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/sox-tutorial-sox-on-android/</guid>
            <description>In this tutorial, I will cover how to install and setup SoX on android devices using Termux.
Termux is a free “Android terminal emulator and Linux environment app that works directly with no rooting or setup required”.
Basically it is a command line interface for your Android device and works like a small linux distribution. It even includes a package management system. And if you get something like an OTG-dongle you can even connect a keyboard and/or a class compliant sound interface.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/sox-android-2.jpg" alt="sox on android"></p>
<p>In this tutorial, I will cover how to install and setup SoX on android devices using Termux.</p>
<p>Termux is a free “Android terminal emulator and Linux environment app that works directly with no rooting or setup required”.</p>
<p>Basically it is a command line interface for your Android device and works like a small linux distribution. It even includes a package management system. And if you get something like an OTG-dongle you can even connect a keyboard and/or a class compliant sound interface.</p>
<h2 id="setup">Setup</h2>
<p>The first think you need to do is install <a href="https://termux.com/">termux</a> on your phone. It can be installed either via PlayStore or F-Droid.</p>
<p>Before continuing, it may be a good idea to make sure Termux has the proper storage permissions.</p>
<p>According to the <a href="https://wiki.termux.com/wiki/Termux-setup-storage">termux wiki</a>:</p>
<p>“It is necessary to grant storage permission for Termux on Android 6 and higher. Use ‘Settings&gt;Apps&gt;Termux&gt;Permissions&gt;Storage’ and set to true.”</p>
<h2 id="installing-sox">Installing sox</h2>
<p>To install a package, first update the information available about the package repos</p>
<pre><code>pkg update
</code></pre>
<p>And then install SoX by executing</p>
<pre><code>pkg install sox
</code></pre>
<p>Hopefully, you now have sox installed on your Android device.</p>
<p>You can verify this using the <code>which</code> command, if it returns nothing, something is wrong, if it returns a path, you should be good.</p>
<pre><code>which sox
</code></pre>
<h2 id="audio-input">Audio input</h2>
<p>To use your Android device’s internal microphone, you need to tweak a few things.</p>
<p>By default, Sox uses the pulseaudio driver to get sound in and out of Termux but the audio input is not activated by default.</p>
<p>Let’s fix this.</p>
<p>First, kill pulseaudio if you have it running.</p>
<pre><code>pulseaudio -k
</code></pre>
<p>Then, restart pulseaudio and load the “module-sles-source” module.</p>
<p>The <code>-D</code> flag will daemonise/background pulseaudio.</p>
<pre><code>pulseaudio -L &quot;module-sles-source&quot; -D
</code></pre>
<p>That’s it, now you can record sound using sox.</p>
<p>Let’s test it by recording 5 seconds of audio, you should see the “meter” on the right react when you make noise.</p>
<pre><code>rec yay.wav trim 00:00 00:05
</code></pre>
<p>And then play it back</p>
<pre><code>play yay.wav
</code></pre>
<p><a href="https://www.madskjeldgaard.dk/wp-content/uploads/2020/03/IMG_2430.jpg"><!-- raw HTML omitted --></a></p>
<hr>
<p>This tutorial is part of series of tutorials:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>SoX tutorial: Batch processing audio on the command line</title>
            <link>http://madskjeldgaard.dk/posts/sox-tutorial-batch-processing/</link>
            <pubDate>Sun, 26 Apr 2020 10:07:25 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/sox-tutorial-batch-processing/</guid>
            <description>To make full use of SoX&amp;rsquo; potential for batch processing we will be using a bit of command line wizardry.
The idea is to put our sox command inside of a for-loop which iterates over all audio files in the folder you are currently in. If you are unsure of what folder your terminal is executing from, you can write pwd to see it&amp;rsquo;s full path and ls to see the folder&amp;rsquo;s contents.</description>
            <content type="html"><![CDATA[<p>To make full use of SoX&rsquo; potential for batch processing we will be using a bit of command line wizardry.</p>
<p>The idea is to put our sox command inside of a for-loop which iterates over all audio files in the folder you are currently in. If you are unsure of what folder your terminal is executing from, you can write <code>pwd</code> to see it&rsquo;s full path and <code>ls</code> to see the folder&rsquo;s contents.</p>
<h1 id="for-loop">For-loop</h1>
<p>The structure of our for-loop-command will look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> file in *.wav; <span style="color:#66d9ef">do</span> command $file; <span style="color:#66d9ef">done</span>
</code></pre></div><p>This needs a bit of explanation. What we see here is shell scripting where commands (or lines of code you could say) are seperated by semi colons.</p>
<p>The first bit of this command (<code>for file in *.wav</code>) will find all files in the current directory containing the suffix <code>.wav</code>. Note that this is case-sensitive, so if you want WAV files to be converted change it to <code>*.WAV</code>, and so on. The smart thing about this is that each file inside of the for-loop will accessible as the variable <code>$file</code>.</p>
<p>The second bit of the command is the meat of it. Here we execute our sox command like we have done previously in this tutorial, with the main difference being we put <code>do</code> in front of it - this is a way to tell our for loop that this is supposed to happen on each file we find.</p>
<p>The third bit is self-explanatory: <code>done</code>.</p>
<p>We will be operating on .wav-files here, but you can easily change the commands to target .aiff files or some other supported file format.</p>
<h1 id="batch-processing-examples">Batch processing examples</h1>
<h2 id="normalize">Normalize</h2>
<p>To normalize a file in SoX we need to apply the <code>norm</code> effect which only takes one parameter which is the sound level to normalize to. A reasonable normalization level is -0.1 dB so let us use that in our conversion process.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> file in *.wav; <span style="color:#66d9ef">do</span> sox <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;n_</span>$file<span style="color:#e6db74">&#34;</span> norm -0.1; <span style="color:#66d9ef">done</span>
</code></pre></div><p>Notice that what we do here is non-destructive. The normalized files produced by this process have the same file names as the input files but with a &ldquo;n_&rdquo; at the beginning to signify that it has been normalized.</p>
<h2 id="channel-conversion">Channel conversion</h2>
<p>Another useful effect included with SoX is <code>channels</code>, this makes it possible for us to specify the number of channels in the output file. This is useful if for example you need to convert a folder of files to mono, this can be done in a manner similar to the above:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> file in *.wav; <span style="color:#66d9ef">do</span> sox <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;mono_</span>$file<span style="color:#e6db74">&#34;</span> channels 1; <span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="convert-to-48khz-sample-rate">Convert to 48khz sample rate</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> file in *.wav; <span style="color:#66d9ef">do</span> sox <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;48khz_</span>$file<span style="color:#e6db74">&#34;</span> rate 48k; <span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="convert-to-16bit">Convert to 16bit</h2>
<p>Now, this is slightly different because when converting bit-depth we need to use a command line flag instead of an effect. Normally, SoX will use the detected bit-depth of the input file as the bit-depth of the output file, but you can force SoX to change it to something else (like 16 bit) by adding a <code>-b 16</code> in between the file names (or <code>-b 24</code> for 24 bit).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> file in *.wav; <span style="color:#66d9ef">do</span> sox <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span> -b <span style="color:#ae81ff">16</span> <span style="color:#e6db74">&#34;16bit_</span>$file<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">done</span>
</code></pre></div><h1 id="where-to-go-from-here">Where to go from here?</h1>
<p>I would highly encourage you to go back and read the SoX manual (<code>man sox</code>, remember?) because there really is a plethora of fun and useful things you can do with SoX in a for-loop.</p>
]]></content>
        </item>
        
        <item>
            <title>SoX tutorial: Split by silence</title>
            <link>http://madskjeldgaard.dk/posts/sox-tutorial-split-by-silence/</link>
            <pubDate>Sun, 26 Apr 2020 01:07:33 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/sox-tutorial-split-by-silence/</guid>
            <description>SoX has a very effective and rather precise way of semi-automatically chopping a sound file into smaller sound files.
Let us say you have a sound file containing many different sounds seperated by a bit of silence in between. It could be a series of drum hits that you have recorded off of a drum machine. To make these sounds easy to use, you most probably need them as seperate sound files so you can load them into a sampler or other software as a sample bank of sorts.</description>
            <content type="html"><![CDATA[<p>SoX has a very effective and rather precise way of semi-automatically chopping a sound file into smaller sound files.</p>
<p>Let us say you have a sound file containing many different sounds seperated by a bit of silence in between. It could be a series of drum hits that you have recorded off of a drum machine. To make these sounds easy to use, you most probably need them as seperate sound files so you can load them into a sampler or other software as a sample bank of sorts.</p>
<p>In SoX we can approach this problem quite simply: Split the input file (the long file containing many different sounds in sequence) by detecting the silence in between the sounds.</p>
<p>To do this we need to use the <code>silence</code> effect in SoX, which I will explain in a bit more detail since it is an important one and it&rsquo;s syntax is a bit esoteric to say the least.</p>
<h2 id="what-is-silence">What is silence</h2>
<p>In the manual, <code>silence</code> is defined like this:</p>
<p>&ldquo;Removes silence from the beginning, middle, or end of the audio. &lsquo;Silence&rsquo; is determined by a specified threshold.&rdquo;</p>
<p><code>silence</code> takes a range of optional arguments but we will only use the first three of them:</p>
<p>• above-periods - indicate if audio should be trimmed at the begnning of the audio. 0 = no silence trimmed from beginning, 1 = trim silence from beginning
• duration - amount of time in seconds that non-silence must be detected before it stops trimming audio
• threshold - audio threshold, we will indicate this in percentages</p>
<p>The parameters are stringed together after the <code>silence</code> keyword in the sox command like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox infile.wav outfile.wav silence above-periods duration threshold
</code></pre></div><h2 id="trimming-silence-from-beginning-and-end-of-one-file">Trimming silence from beginning and end of one file</h2>
<p>To trim the beginning of a file until the audio is above 1% in volume for more than 0.1 seconds, you would write a command like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox infile.wav outfile.wav silence <span style="color:#ae81ff">1</span> 0.1 1%
</code></pre></div><p>To trim the ending as well, we basically repeat the parameters like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox infile.wav outfile.wav silence <span style="color:#ae81ff">1</span> 0.1 1% <span style="color:#ae81ff">1</span> 0.1 1%
</code></pre></div><h2 id="chaining-pseudo-effects">Chaining (pseudo) effects</h2>
<p>This is all good and well, but we want to produce a sample bank from one input audio file. To do this we need to make use of SoX&rsquo; ability to chain effects chains after eachother and enter into &ldquo;multiple output file mode&rdquo;.</p>
<p>From the manual: &ldquo;In multiple output mode, a new file is created when the effects prior to the &lsquo;newfile&rsquo; indicate they are done. The effects chain listed after &lsquo;newfile&rsquo; is then started up and its output is saved to the new file.&rdquo;</p>
<p>An effects chain can thus be chained after another using a colon <code>:</code>. Now instead of manually writing out the silence effect and it&rsquo;s parameters for each bit we want to extract from the sound file, we can make the process automatically restart each time it has detected a bit of sound by silence</p>
<p>To do this we need to chain the <code>restart</code> pseudoeffect at the end of our command. This will make the process create a new file from the bit it detected by silence, then restart the process from where it left off and repeat until it reaches the end of the file. Kind of like slicing off bits of a (sound) sausage from left to right.</p>
<p>Our final command for chopping files by silence will then end up looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox infile.wav outfile.wav silence <span style="color:#ae81ff">1</span> 0.1 1% <span style="color:#ae81ff">1</span> 0.1 1% : newfile : restart
</code></pre></div><h2 id="chopping-three-bursts">Chopping three bursts</h2>
<p><img src="/img/small/threebursts.png" alt="alt"></p>
<p>As an example of the above, let us have a look at a sound file containing three short noise bursts.</p>
<p>The sound file is called threebursts.wav and can be <a href="/audio/threebursts.wav">downloaded here</a>.</p>
<p>To split the soundfile into three seperate files containing the bursts (without the silence in between), we simply execute the command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox threebursts.wav burst_num.wav silence <span style="color:#ae81ff">1</span> 0.1 1% <span style="color:#ae81ff">1</span> 0.1 1% : newfile : restart
</code></pre></div><p>which will produce sound files called &ldquo;burst_num001.wav&rdquo;, &ldquo;burst_num002.wav&rdquo; etc.</p>
<p>Now this works very well for our very unnatural example here, but I encourage you to mess around with the parameters when you do this on your own with your own files. Change the threshold to 5% for example if it&rsquo;s noisy or set the duration to something higher if it results in too many small files.</p>
<p>Note: Sometimes on some systems this command will produce an extra audio file containing nothing. I honestly have no idea why. Just delete the file (or send me an email if you have a solution to this problem)</p>
]]></content>
        </item>
        
        <item>
            <title>SoX tutorial: Command line tape music (an introduction)</title>
            <link>http://madskjeldgaard.dk/posts/sox-tutorial-cli-tape-music/</link>
            <pubDate>Sun, 26 Apr 2020 00:00:44 +0200</pubDate>
            
            <guid>http://madskjeldgaard.dk/posts/sox-tutorial-cli-tape-music/</guid>
            <description>SoX is a very powerful command line audio processing tool. You can think of it as a sort of command line equivalent of Audacity but with a text based interface that let&amp;rsquo;s you perform powerful audio operations by typing just a few words in your computer&amp;rsquo;s terminal.
I came across SoX via the live coding community where it is a popular tool for chopping sound files (by detecting silence) and batch processing large quantities of audio files (eg.</description>
            <content type="html"><![CDATA[<p>SoX is a very powerful command line audio processing tool. You can think of it as a sort of command line equivalent of Audacity but with a text based interface that let&rsquo;s you perform powerful audio operations by typing just a few words in your computer&rsquo;s terminal.</p>
<p>I came across SoX via the live coding community where it is a popular tool for chopping sound files (by detecting silence) and batch processing large quantities of audio files (eg. normalizing and entire folder of drum sounds in a matter of seconds). It is a very trustworhy and flexible solution ̣̣- and can even be used for DJ&rsquo;ing.</p>
<p>But the commands for SoX are dense and sometimes slightly obscure so getting started is not always easy.</p>
<p>Hopefully, this tutorial will sort out those problems.</p>
<h2 id="installing-sox">Installing SoX</h2>
<h3 id="macos">MacOS</h3>
<p>Using the Homebrew package manager:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brew install sox
</code></pre></div><h3 id="windows">Windows</h3>
<p>Using the Chocolatey package manager</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">choco install sox.portable
</code></pre></div><h3 id="ubuntu">Ubuntu</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install sox
</code></pre></div><h3 id="arch--manjaro">Arch / Manjaro</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo pacman -S sox
</code></pre></div><h2 id="whats-included">What&rsquo;s included</h2>
<h3 id="the-manual">The manual</h3>
<p><img src="/img/small/sox-man.png" alt="sox manual"></p>
<p>To read the manual, open up a terminal and type <code>man sox</code>.</p>
<p>The manual is the best place to find information and example usages for SoX.</p>
<p>To search the manual press <code>/</code> followed by your search query. By pressing <code>n</code> while searching, the cursor will jump to the next instance of the query you searched for. By pressing <code>N</code> the cursor will jump to the previous instance.</p>
<p>Scroll forward one page by pressing <code>ctrl-f</code></p>
<p>And backwards one page by pressing <code>ctrl-b</code></p>
<p>Exit the manual by pressing <code>q</code></p>
<h3 id="audio-recorder">Audio recorder</h3>
<p>SoX includes a very handy way of recording audio using the <code>rec</code> command.</p>
<p>The simplest use is to type <code>rec filename</code> which will start recording from the default input until you stop it by pressing <code>ctrl-c</code> in the terminal window.</p>
<p>Example use:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rec hello.wav
</code></pre></div><p>You can specify a predefined length of the recording like this: <code>rec hello.wav trim 0 30:00</code> which will record for 30 minutes and then automatically stop</p>
<h3 id="audio-player">Audio player</h3>
<p>Similarly, playing audio is also possible using the command <code>play</code></p>
<p>Example use:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">play hello.wav
</code></pre></div><p>Note that both play and rec can be used with SoX&rsquo;s many included effects.</p>
<p>Playing the above example at half speed with a flanger at the end is as simple as</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">play hello.wav speed 0.5 flanger
</code></pre></div><h2 id="command-line-basics">Command line basics</h2>
<p>You do not have to have a lot of command line experience to use SoX but there is a few basic commands that will make it easier for you to navigate your computer in the command line.</p>
<p>• <code>pwd</code> - see path to directory you are currently in
• <code>ls</code> - see files in current directory
• <code>cd /some/path</code> - move to <strong>/some/path</strong>
• <code>cd ..</code> - move up one folder
• <code>cd ~</code> - move to home folder</p>
<p>As well as commands, here are some essential keyboard shortcuts:
• up/down - scroll through previous commands (easy way to see / reuse previous work)
• ctrl-c - cancel/abort the program (a sort of panic button)</p>
<p>Sometimes, a simple way of using <code>cd</code> is to drag and drop a folder from your computer onto your terminal, this will in most cases paste the full path.</p>
<h2 id="the-sox-command">The sox command</h2>
<p>Our main interface for sox in this tutorial will be the <code>sox</code> command. The basic usage of this includes specifying an input file path, an output file path and then optionally some effects followed by an optional series of parameters.</p>
<p>The basic command we will use will thus look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox inputfile outputfile effect parameters
</code></pre></div><p>If your input or output file contains spaces in the file name, you should wrap the path to it in quotation marks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox <span style="color:#e6db74">&#34;/some folder/containg/a sound.wav&#34;</span> <span style="color:#e6db74">&#34;outputfolder/a new sound.wav&#34;</span> effect param1
</code></pre></div><p>Like other command line tools, sox executes from the context of the folder that you are currently in (which can be found by typing <code>pwd</code>) and as such you do not need to type out the entire path to a file if it is in the same folder as the one you are executing sox from.</p>
<h2 id="command-line-tape-music">Command line tape music</h2>
<p>Tape music artists of the 60&rsquo;s and 70&rsquo;s had very rudimentary tools at their disposal - mostly they did their work using reel-to-reel tape recorders and simple effects. But you would be surprised by the incredible sonic possibilities available in a tool as simple as this, using basic techniques of recording, reversing, adding effects, changing playback speed, etc. you can get a long way towards making interesting music.</p>
<p>Let us explore some of SoX&rsquo; basic commands a bit by doing some command line audio manipulations reminiscent of classic tape music techniques.</p>
<p>First of all, we need some audio to operate on. I would recommend recording a quick bit from your computer&rsquo;s microphone. If you have an instrument around, maybe use that for this exercise or simply (like me) whistle like an idiot in front of your computer.</p>
<p>Record to the file idiot.wav for 10 seconds:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rec idiot.wav trim 0:0 0:10
</code></pre></div><p>Once SoX is done recording, it will post a &ldquo;done&rdquo; message.</p>
<p>Moving on, let us test the file we just recorded</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">play idiot.wav
</code></pre></div><p>You should now hear yourself doing something silly in front of your computer a few seconds ago.</p>
<p>To convert this to something else, we need to invoke the <code>sox</code> command now, providing it with an input file name, an output file name and a chain of effects. In this example, I will add a silly effects chain consisting of reversing the audio -&gt; flanger (2ms delay) -&gt; playback speed 50% (0.5) -&gt; reverb. The output of this operation will be saved in the file <code>art.wav</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox idiot.wav art.wav reverse flanger <span style="color:#ae81ff">2</span> speed 0.5 reverb
</code></pre></div><p>If you execute the command <code>ls</code> now, you should in your directory see both the files idiot.wav (the original) and the manipulated file art.wav.</p>
<p>Just to be sure, we can test our output file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">play art.wav
</code></pre></div><p>Now, we would not be proper command line tape musicians if we felt satisfied after 1 manipulation to the original recording, so let us continue our sonic journey by transforming the <code>art.wav</code> file further, this time we will time stretch to twice the length (factor 2), reverse the audio again and add some reverb. Just to make sure we do not lose too much of our audio level, we will normalize the output to -0.1db as well finally saving the result in the file <code>art2.wav</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sox art.wav art2.wav stretch <span style="color:#ae81ff">2</span> reverse reverb norm -0.1
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>NeoVim setup for c&#43;&#43; and openFrameworks development</title>
            <link>http://madskjeldgaard.dk/neovim-setup-for-c-and-openframeworks-development/</link>
            <pubDate>Mon, 06 Apr 2020 15:44:23 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/neovim-setup-for-c-and-openframeworks-development/</guid>
            <description>It is possible to get a nice development environment on Linux (and other platforms) using NeoVim and a few plugins and settings.
This dev environment includes snippets, autocomplete, debugging and smart code suggestions for methods.
I got a lot of pointers for this setup from Chendi Xue’s blogpost about Vim/CPP development.
So, without further ado here are my notes for setting up shop using YouCompleteMe, UltiSnips and some formatting plugins.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/of-vim.png" alt="open frameworks + vim"></p>
<p>It is possible to get a nice development environment on Linux (and other platforms) using NeoVim and a few plugins and settings.</p>
<p>This dev environment includes snippets, autocomplete, debugging and smart code suggestions for methods.</p>
<p>I got a lot of pointers for this setup from <a href="https://xuechendi.github.io/2019/11/11/VIM-CPP-IDE-2019-111-11-VIM_CPP_IDE">Chendi Xue’s blogpost about Vim/CPP development</a>.</p>
<p>So, without further ado here are my notes for setting up shop using YouCompleteMe, UltiSnips and some formatting plugins.</p>
<h2 id="install-clang-formatting">Install clang formatting</h2>
<p>On Arch Linux I had to install clang to make this work: <code>sudo pacman -Syu clang</code></p>
<p>There’s some really nice autoformatting plugins from Google. Add these to your init.vim and install:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; Code formatting (for c++)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;google/vim-maktaba&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;google/vim-codefmt&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">Plug</span> <span style="color:#e6db74">&#39;google/vim-glaive&#39;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>This should now automatically fix your code automatically with the following in your init.vim:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; CPP setup done using this tutorial https://xuechendi.github.io/2019/11/11/VIM-CPP-IDE-2019-111-11-VIM_CPP_IDE</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; Code formatting</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">c</span>,<span style="color:#a6e22e">cpp</span>,<span style="color:#a6e22e">proto</span>,<span style="color:#a6e22e">javascript</span> <span style="color:#a6e22e">AutoFormatBuffer</span> <span style="color:#a6e22e">clang</span>-<span style="color:#a6e22e">format</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="ctags">Ctags</h2>
<p>Ctags makes it possible to autocomplete source code when you are writing code and with the power of YCM it should also make it possible to work with methods of classes in a nice way.</p>
<p>First, install Ctags</p>
<p>Arch: <code>sudo pacman -Syu ctags</code></p>
<p>To compile tags files for my open frameworks projects I use the python tool <a href="https://pypi.org/project/compiledb/">compiledb</a></p>
<p>This can be installed using pip:</p>
<p><code>pip install compiledb</code></p>
<p>Now, from the root of your open frameworks projects you can run the following command to generate a tags file:</p>
<p><code>compiledb -n make</code></p>
<p>This will output a file called <code>compile_commands.json</code> containing the tags.</p>
<h2 id="youcompleteme">YouCompleteMe</h2>
<p><img src="/img/gif/of-ycm.gif" alt="open frameworks + vim"></p>
<p><a href="https://www.madskjeldgaard.dk/wp-content/uploads/2020/04/of-ycm.gif"><!-- raw HTML omitted --></a></p>
<p>Following this installation guide thoroughly <a href="https://github.com/ycm-core/YouCompleteMe/wiki/Full-Installation-Guide">installation guide</a></p>
<p>Especially make sure you have <a href="https://clangd.llvm.org/installation.html">clangd</a> installed. On arch, this was installed automatically for me with the <code>clang</code> package but you can verify this on the command line by running <code>which clangd</code> which should return a path to the binary, otherwise you need to install it.</p>
<p>It’s especially important to add this line to your init.vim file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_clangd_binary_path</span> = <span style="color:#e6db74">&#34;/path/to/clangd&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p><code>/path/to/clangd</code> can be replaced by the output of the command <code>which clangd</code></p>
<p>Now you should have automatic debugging and autocomplete suggestions.</p>
<p>Try opening up a openframeworks, run the <code>compiledb -n make</code> command and move to <code>ofApp.cpp</code> and inside the setup function add the following:</p>
<p><code>auto rect = ofRectangle(0, 0, 250, 250);</code></p>
<p>This will make a rectangle object. Now, in the next line, write <code>rect.</code> – by the <code>.</code> you should now see a list of suggested methods to use that are native to the ofRectangle class.</p>
<h2 id="keybindings">Keybindings</h2>
<p>Most of the relevant keymappings I use, I got from <a href="http://roosnaflak.com/tech-and-research/openframeworks-nvim-archlinux/">Kenneth Flak’s blogpost about the same</a>. These will setup vim to compile your oF program when you press ctrl-e (this is convenient since this is the same shortcut we use in <a href="https://github.com/davidgranstrom/scnvim">SCNVim</a>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">augroup</span> <span style="color:#a6e22e">c</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">autocmd</span>!<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">c</span>,<span style="color:#a6e22e">cpp</span>,<span style="color:#a6e22e">h</span>,<span style="color:#a6e22e">hpp</span>,<span style="color:#a6e22e">glsl</span> <span style="color:#a6e22e">call</span> <span style="color:#a6e22e">MakeRun</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">augroup</span> <span style="color:#a6e22e">end</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">function</span>! <span style="color:#a6e22e">MakeRun</span>()<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">nnoremap</span> :<span style="color:#a6e22e">terminal</span> <span style="color:#a6e22e">make</span> -<span style="color:#a6e22e">j8</span> &amp;&amp; <span style="color:#a6e22e">make</span> <span style="color:#a6e22e">run</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">inoremap</span> :<span style="color:#a6e22e">terminal</span> <span style="color:#a6e22e">make</span> -<span style="color:#a6e22e">j8</span> &amp;&amp; <span style="color:#a6e22e">make</span> <span style="color:#a6e22e">run</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">endfunction</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>And then some nice keybindings to work with YouCompleteMe:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; Find definition</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">si</span> :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GoToDefinition</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Reboot Ycm server</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">sk</span> :<span style="color:#a6e22e">YcmRestartServer</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Fix thing under cursor</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">FixIt</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Regenerate tags file</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> :!<span style="color:#a6e22e">compiledb</span> -<span style="color:#a6e22e">n</span> <span style="color:#a6e22e">make</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Go to documentation</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">K</span> :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GetDoc</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Echo the type/arguments of class</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">au</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">cpp</span> <span style="color:#a6e22e">nnoremap</span> ; :<span style="color:#a6e22e">YcmCompleter</span> <span style="color:#a6e22e">GetType</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; new split with alternate file</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">mv</span> :<span style="color:#a6e22e">AV</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">&#34; switch in same window</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">ma</span> :<span style="color:#a6e22e">A</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h1 id="snippets">Snippets</h1>
<p><img src="/img/gif/of-snippets.gif" alt="open frameworks + vim"></p>
<p>Another really nice feature in this dev environment is the addition of snippets. I use UltiSnips for this. When I set this up, I read varying reports about how well UltiSnips works with YCM, but for me it works fine.</p>
<p>Install <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> and then add these to your init.vim:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#75715e">&#34; YouCompleteMe and UltiSnips compatibility.</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_use_ultisnips_completer</span> = <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_key_list_select_completion</span>=[]<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">ycm_key_list_previous_completion</span>=[]<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Expand snippets from UltiSnips with tab</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsExpandTrigger</span>=<span style="color:#e6db74">&#34;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsJumpForwardTrigger</span>=<span style="color:#e6db74">&#34;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsJumpBackwardTrigger</span>=<span style="color:#e6db74">&#34;&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">
</span><span style="color:#75715e">&#34; Where the different snippet directories are stored</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">UltiSnipsSnippetDirectories</span> = [<span style="color:#e6db74">&#39;UltiSnips&#39;</span>, <span style="color:#e6db74">&#39;scnvim-data&#39;</span>, <span style="color:#e6db74">&#39;plugged/vim-snippets&#39;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I’d also recommend installing <a href="github.com/honza/vim-snippets/">vim-snippets</a> which contains extra snippets.</p>
<p>Now, when for example you type <code>if</code> in a <code>.cpp</code> or <code>.h</code> file you can hit tab to expand it to get the full code for an if-statement. If you want, you can even add your own custom snippets using Ultisnips powerful capabilities ( execute <code>:h snippets</code> in Vim for more info about this ). Below I have defined two snippets. One which will expand when typing <code>ofclass</code> and one when typing <code>ofheader</code>. The first will create a sensible class and the latter a sensible header. Hit tab to cycle through the arguments.</p>
<p>To use these snippets, add these to the file (which you can create if it doesn’t exist yet) <code>~/.vim/UltiSnips/cpp.snippets</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">snippet</span> <span style="color:#a6e22e">ofclass</span> <span style="color:#e6db74">&#34;Class for open frameworks&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>#<span style="color:#a6e22e">include</span> <span style="color:#e6db74">&#34;${1:`!p snip.rv = snip.basename`}.h&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>$<span style="color:#ae81ff">1</span>::$<span style="color:#ae81ff">1</span>(){}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> $<span style="color:#ae81ff">1</span>::<span style="color:#a6e22e">setup</span>(){${<span style="color:#ae81ff">2</span>:}}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> $<span style="color:#ae81ff">1</span>::<span style="color:#a6e22e">update</span>(){${<span style="color:#ae81ff">3</span>:}}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> $<span style="color:#ae81ff">1</span>::<span style="color:#a6e22e">draw</span>(){${<span style="color:#ae81ff">4</span>:}}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">endsnippet</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">snippet</span> <span style="color:#a6e22e">ofheader</span> <span style="color:#e6db74">&#34;Header for open frameworks class&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>#<span style="color:#a6e22e">ifndef</span> ${<span style="color:#ae81ff">1</span>:`!<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">snip</span>.<span style="color:#a6e22e">rv</span> = <span style="color:#e6db74">&#34;_&#34;</span> + <span style="color:#a6e22e">snip</span>.<span style="color:#a6e22e">basename</span>.<span style="color:#a6e22e">upper</span>()`}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>#<span style="color:#a6e22e">define</span> $<span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>#<span style="color:#a6e22e">include</span> <span style="color:#e6db74">&#34;ofMain.h&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">class</span> ${<span style="color:#ae81ff">2</span>:`!<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">snip</span>.<span style="color:#a6e22e">rv</span> = <span style="color:#a6e22e">snip</span>.<span style="color:#a6e22e">basename</span>`} {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">public</span>:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> <span style="color:#a6e22e">setup</span>();<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> <span style="color:#a6e22e">update</span>();<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">void</span> <span style="color:#a6e22e">draw</span>();<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>$<span style="color:#ae81ff">2</span>(); <span style="color:#e6db74">//</span> <span style="color:#a6e22e">constructor</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>${<span style="color:#ae81ff">0</span>}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">private</span>:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>};<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>#<span style="color:#66d9ef">endif</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">endsnippet</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>SuperCollider workshop at Notam, january 2020: Algorithmic composition using patterns</title>
            <link>http://madskjeldgaard.dk/supercollider-workshop-at-notam-january-2020-algorithmic-composition-using-patterns/</link>
            <pubDate>Thu, 23 Jan 2020 21:18:29 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/supercollider-workshop-at-notam-january-2020-algorithmic-composition-using-patterns/</guid>
            <description>Here are the slides for the SuperCollider workshop at Notam, january 2020.
Download slides
 Algorithmic composition using patterns Notam, january 2020  About me  Name: Mads Kjeldgaard Occupation: Composer and developer Work: The Norwegian Center for Technology and Art (Notam)   Notam  Development for art projects (hardware, software, tech and artistic guidance) Communities / meetups (SC meetup among others), see website notam.no Studios / 3D sound / VR / Visuals / Electronics Courses   My practice  Computer music / livecoding Concrete music Cybernetic / systemic music   Contact info  mail: mail@madskjeldgaard.</description>
            <content type="html"><![CDATA[<p>Here are the slides for the SuperCollider workshop at Notam, january 2020.</p>
<p><a href="/pdf/pattern-workshop-notam-2020.pdf">Download slides</a></p>
<hr>
<h2 id="algorithmic-composition-using-patterns">Algorithmic composition using patterns</h2>
<h3 id="notam-january-2020">Notam, january 2020</h3>
<hr>
<h2 id="about-me">About me</h2>
<ul>
<li>Name: Mads Kjeldgaard</li>
<li>Occupation: Composer and developer</li>
<li>Work: The Norwegian Center for Technology and Art (Notam)</li>
</ul>
<hr>
<h2 id="notam">Notam</h2>
<ul>
<li>Development for art projects (hardware, software, tech and artistic
guidance)</li>
<li>Communities / meetups (SC meetup among others), see website
<a href="http://notam.no">notam.no</a></li>
<li>Studios / 3D sound / VR / Visuals / Electronics</li>
<li>Courses</li>
</ul>
<hr>
<h2 id="my-practice">My practice</h2>
<ul>
<li>Computer music / livecoding</li>
<li>Concrete music</li>
<li>Cybernetic / systemic music</li>
</ul>
<hr>
<h2 id="contact-info">Contact info</h2>
<ul>
<li>mail: <a href="mailto:mail@madskjeldgaard.dk">mail@madskjeldgaard.dk</a></li>
<li>web: <a href="http://madskjeldgaard.dk">madskjeldgaard.dk</a></li>
<li>github:
<a href="http://github.com/madskjeldgaard">github.com/madskjeldgaard</a></li>
<li>work: <a href="http://notam.no">notam.no</a></li>
</ul>
<hr>
<h2 id="about-algorithmic-composition">About algorithmic composition</h2>
<hr>
<h2 id="what-is-an-algorithm">What is an algorithm?</h2>
<p>An algorithm is a process that takes something as an input, computes on
it, and then outputs the result.</p>
<hr>
<p>&ldquo;A recipe is a good example of an algorithm because says what must be
done, step by step. It takes inputs (ingredients) and produces an output
(the completed dish).&rdquo; - from Wikipedia</p>
<hr>
<p>In music, we can crudely think of the input as <em>parameters</em> and the
output as <em>sound</em></p>
<hr>
<h2 id="when-composing-with-algorithms-">When composing with algorithms &hellip;</h2>
<p>&hellip; We define the <em>conditions</em> for a composition, rather than the
specificities of a composition</p>
<hr>
<h2 id="algorithmic-time">Algorithmic time</h2>
<p>When writing music using algorithms, you are forced to reconsider
compositional time in your work</p>
<hr>
<h2 id="algorithmic-time-nonlinearity">Algorithmic time: Nonlinearity</h2>
<p>The most immediate consequence is an escape* from the linear timeline
we experience in a DAW</p>
<p>* You can never escape time</p>
<hr>
<h2 id="algorithmic-time-on-the-verge">Algorithmic time: On the verge</h2>
<p>&ldquo;algorithms are on the verge of time, in so far as they are on the verge
between constancy and change, on the one hand, and between concrete and
abstract temporality, on the other.&rdquo; - Julian Rohrhuber, Algorithmic
music and the Philosophy of Time</p>
<hr>
<h2 id="algorithmic-time-supercollider-and-time">Algorithmic time: SuperCollider and time</h2>
<p><a href="https://medias.ircam.fr/xb090dd_supercollider-and-time">SuperCollider and Time
(Ircam)</a> - A
nice technical introduction to SuperCollider&rsquo;s idea of time by the
creator of SuperCollider</p>
<hr>
<h2 id="design">Design</h2>
<hr>
<h2 id="short-history-of-supercollider">Short history of SuperCollider</h2>
<p>SC was designed by James McCartney as closed source proprietary software</p>
<p>Version 1 <a href="https://groups.google.com/forum/#!topic/comp.music.research/g2f9EcL1mUw">came out in 1996 based on a Max
object</a>
called Pyrite. Cost 250$+shipping and could only run on PowerMacs.</p>
<p>Became free open source software in 2002 and is now cross platform.</p>
<hr>
<h2 id="overview">Overview</h2>
<p>When you download SuperCollider, you get an application that consists of
3 separate programs:</p>
<ol>
<li>The IDE, a smart text editor</li>
<li>The SuperCollider language / client (<strong>sclang</strong>)</li>
<li>The SuperCollider sound server (<strong>scsynth</strong>)</li>
</ol>
<hr>
<h2 id="architecture">Architecture</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-server.png" alt="alt"></p>
<p>The client (language and interpreter) communicates with the server
(signal processing)</p>
<p>This happens over the network using Open Sound Control</p>
<hr>
<h2 id="multiple-servers">Multiple servers</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-multiple-servers.png" alt="alt"></p>
<p>This modular / networked design means one client can control many
servers</p>
<hr>
<h2 id="consequences-of-this-modular-design">Consequences of this modular design</h2>
<h2 id="each-of-supercolliders-components-are-replacable">Each of SuperCollider&rsquo;s components are replacable</h2>
<p>IDE &lt;&mdash;&gt; Atom, Vim, or Visual Studio</p>
<p>language &lt;&mdash;&gt; Python, CLisp, Javascript</p>
<p>server &lt;&mdash;&gt; Max/MSP, Ableton Live, Reaper</p>
<hr>
<h2 id="extending-supercollider">Extending SuperCollider</h2>
<p>The functionality of SuperCollider can be extended using external
packages</p>
<p>These are called Quarks and can be installed using SuperCollider itself</p>
<pre><code>// Install packages via GUI (does not contain all packages)
Quarks.gui;

// Install package outside of gui using URL
Quarks.install(&quot;https://github.com/madskjeldgaard/KModules&quot;);
</code></pre>
<hr>
<h2 id="sc-plugins">SC Plugins</h2>
<p><a href="https://supercollider.github.io/sc3-plugins/">SC3 Plugins</a> is a
collection of user contributed code, mostly for making sound</p>
<p>The plugins are quite essential (and of varying quality / maintenance)</p>
<hr>
<h1 id="ide">IDE</h1>
<hr>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/09/ide.png" alt="theide"></p>
<hr>
<h2 id="important-keyboard-shortcuts">Important keyboard shortcuts</h2>
<ul>
<li>Open help file for thing under cursor: <strong>Ctrl/cmd + d</strong></li>
<li>Evaluate code block: <strong>Ctrl/cmd + enter</strong></li>
<li>Stop all running code: <strong>Ctrl/cmd + .</strong></li>
<li>Start audio server: <strong>Ctrl/cmd + b</strong></li>
<li>Recompile: <strong>Ctrl/cmd + shift + l</strong></li>
<li>Clear post window: <strong>Ctrl/cmd + shift + p</strong></li>
</ul>
<hr>
<h2 id="the-ide-as-a-calculator">The IDE as a calculator</h2>
<p>SuperCollider is an interpreted language</p>
<p>This means we can &ldquo;live code&rdquo; it without waiting for it to compile</p>
<p>A good example of this is using it as a calculator</p>
<hr>
<h2 id="autocompletion">Autocompletion</h2>
<p>Start typing and see a menu pop up with suggestions (and help files)</p>
<hr>
<h2 id="the-status-line">The status line</h2>
<p>Shows information about system usage</p>
<p>Right click to see server options + volume slider</p>
<hr>
<h2 id="about-patterns">About patterns</h2>
<hr>
<p>From the <a href="http://doc.sccode.org/Classes/Pattern.html">Pattern help
file</a>:</p>
<h3 id="the-pattern-classes-form-a-rich-and-concise-score-language-for-music">&ldquo;[The Pattern] classes form a rich and concise score language for music&rdquo;</h3>
<hr>
<h2 id="in-other-words">In other words:</h2>
<p>Patterns are used to sequence and compose music</p>
<hr>
<h2 id="abstracting-the-composition-process">Abstracting the composition process</h2>
<p>the conditions for a composition vs.  a fixed composition</p>
<hr>
<h2 id="its-just-data">It&rsquo;s just data</h2>
<p>Easily transpose, stretch and warp the composition</p>
<hr>
<h2 id="duration-is-not-an-issue">Duration is not an issue</h2>
<p>Composing a 4 bar loop is not necessarily any more or less work than a 4
hour one</p>
<hr>
<h2 id="guides-in-the-help-system">Guides in the help system</h2>
<p>Patterns are pretty well documented in the help system:</p>
<ul>
<li><a href="http://doc.sccode.org/Browse.html#Streams-Patterns-Events%3EA-Practical-Guide">A practical
guide</a></li>
<li><a href="http://doc.sccode.org/Browse.html#Tutorials%3EStreams-Patterns-Events">Understanding Streams, Events and
Patterns</a></li>
</ul>
<hr>
<h2 id="event-patterns">Event patterns</h2>
<hr>
<h2 id="like-pressing-the-key-of-a-piano">Like pressing the key of a piano</h2>
<p>What data does that involve?</p>
<hr>
<ul>
<li>Duration of key press</li>
<li>Pitch of the key</li>
<li>Sustain (are you holding the foot pedal?)</li>
<li>etc. etc.</li>
</ul>
<hr>
<h2 id="what-an-event-looks-like">What an Event looks like</h2>
<pre><code>// See the post window when evaluating these
().play; // Default event
(freq:999).play; 
(freq:123, sustain: 8).play;
</code></pre>
<hr>
<h2 id="changing-the-default-synth">Changing the default synth</h2>
<p>The default synth sucks</p>
<p>You can change it by defining a new synth called \default</p>
<p>More info on <a href="https://www.madskjeldgaard.dk/how-to-change-the-default-synth-in-supercollider/">my
website</a></p>
<hr>
<h2 id="introducing-the-allmighty-pbind">Introducing the allmighty Pbind</h2>
<p>Arguably the most important pattern class in SuperCollider</p>
<hr>
<h2 id="pbind-data">Pbind data</h2>
<p>Pbind simply consists of a list of key/value pairs</p>
<hr>
<h2 id="keys-correspond-to-synth-arguments">Keys correspond to Synth arguments</h2>
<p>Most often, keys correspond to a Synth&rsquo;s arguments.</p>
<p>Example: If a SynthDef has the argument cutoff, we can access that
argument in a Pbind using \cutoff.</p>
<hr>
<h2 id="some-keys-are-special">Some keys are special</h2>
<hr>
<h1 id="dur">dur</h1>
<p>\dur is used in most SynthDef&rsquo;s to specify the duration of a note/event.</p>
<p>Make sure this key never gets the value 0.</p>
<hr>
<h2 id="stretch">stretch</h2>
<p>\stretch is used to stretch or shrink the timing of a Pbind</p>
<hr>
<h2 id="when-does-a-pbind-end">When does a Pbind end?</h2>
<p>If one of the keys of a Pbind are supplied with a fixed length value
pattern, the one running out of values first, will make the Pbind end.</p>
<hr>
<h2 id="livecoding-pdef">Livecoding: Pdef</h2>
<p>Livecoding patterns is easy. All you have to do is wrap your event
pattern (Pbind) in a Pdef:</p>
<pre><code>Pdef('myCoolPattern', Pbind(...)).play;
</code></pre>
<hr>
<h2 id="what-this-means">What this means</h2>
<p>The Pdef has a name (&lsquo;myCoolPattern&rsquo;) which is a kind of data slot
accessible throughout your system</p>
<p>Everytime you evaluate this code, it overwrites that data slot
(maintaining only one copy)</p>
<hr>
<h2 id="value-patterns">Value patterns</h2>
<hr>
<h2 id="the-building-blocks-of-compositions">The building blocks of compositions</h2>
<ul>
<li>List patterns</li>
<li>Random patterns</li>
<li>Envelope patterns</li>
<li>Rests</li>
<li>Data sharing between event parameters</li>
<li>Patterns in patterns</li>
</ul>
<hr>
<h2 id="list-patterns">List patterns</h2>
<p>See <a href="http://doc.sccode.org/Browse.html#Streams-Patterns-Events%3EPatterns%3EList">all of them
here</a></p>
<hr>
<h2 id="pseq-classic-sequencer">Pseq: Classic sequencer</h2>
<pre><code>// Play values 1 then 2 then 3
Pseq([1,2,3]);

// 4 to the floor
Pseq([1,1,1,1]);
</code></pre>
<hr>
<h2 id="testing-value-patterns-asstream">Testing value patterns: asStream</h2>
<p>You will see the .asStream method a lot in the documentation for value
patterns.</p>
<pre><code>// Pattern
p = Pseq([1,2,3]);

// Convert to stream
p = p.asStream;

// See what values the pattern produces
p.next; // 1, 2, 3, nil
</code></pre>
<hr>
<h2 id="random-value-patterns-pwhite-and-pbrown">Random value patterns: Pwhite and Pbrown</h2>
<pre><code>// (Pseudo) random values
Pwhite(lo: 0.0, hi: 1.0, length: inf);

// Drunk walk
Pbrown(lo: 0.0, hi: 1.0, step: 0.125, length: inf);
</code></pre>
<hr>
<h2 id="random-sequence-patterns-prand-and-pxrand">Random sequence patterns: Prand and Pxrand</h2>
<pre><code>// Randomly choose from a list
Prand([1,2,3],inf);

// Randomly choose from a list (no repeating elements)
Pxrand([1,2,3],inf);
</code></pre>
<hr>
<h2 id="probability-pwrand">Probability: Pwrand</h2>
<p>Choose items in a list depending on probability</p>
<pre><code>// 50/50 chance of either 1 or 10
Pwrand([1, 10], [0.5, 0.5])

// 25% chance of 1, 25% change of 3, 50% chance of 7
Pwrand([1, 3, 7], [0.25, 0.25, 0.5])

// 30% chance of 3, 40% change of 2, 30% chance of 5
Pwrand([4, 2, 5], [0.3, 0.4, 0.3])
</code></pre>
<hr>
<h2 id="envelope-pattern-pseg">Envelope pattern: Pseg</h2>
<pre><code>// Linear envelope from 1 to 5 in 4 beats
Pseg( levels: [1, 5], durs: 4, curves: \linear);

// Exponential envelope from 10 to 10000 in 8 beats 
Pseg( levels: [10, 10000], durs: 8, curves: \exp);
</code></pre>
<hr>
<h2 id="rest">Rest</h2>
<p>Skip/sleep a pattern using Rest. If used in the \dur key of a Pbind, the
value in the parenthesis is the sleep time</p>
<pre><code>// One beat, two beats, rest 1 beat, 3 beats
Pbind(\dur, Pseq([1,2,Rest(1),3])).play;
</code></pre>
<hr>
<h2 id="pkey-share-data-between-event-keys">Pkey: Share data between event keys</h2>
<p>Using Pkey we can make an event&rsquo;s parameters interact with eachother</p>
<pre><code>// The higher the scale degree
// ... the shorter the sound
Pbind(
    \degree, Pwhite(1,10),
    \dur, 1 / Pkey(\degree)
).play
</code></pre>
<p>More info about data sharing in patterns:
<a href="http://doc.sccode.org/Tutorials/A-Practical-Guide/PG_06g_Data_Sharing.html">here</a></p>
<hr>
<h2 id="patterns-in-patterns-the-computer-music-inception">patterns in patterns: The computer music inception</h2>
<p>You can put patterns in almost all parts of patterns.</p>
<p>This may lead to interesting results:</p>
<pre><code>// A sequence with 3 random values at the end
Pseq([1,2,Pwhite(1,10,3)]);

// An exponential envelope of random length
Pseg(levels: [10, 10000], durs: Pwhite(1,10), curves: \exp);
</code></pre>
<hr>
<h2 id="working-with-pitches-and-pbinds">Working with pitches and Pbinds</h2>
<hr>
<h2 id="pitch-model">Pitch model</h2>
<p><img src="http://doc.sccode.org/Classes/Event-default-note.png" alt="pitch model"></p>
<p><a href="http://doc.sccode.org/Classes/Event.html">Pitch model is described
here</a></p>
<hr>
<h2 id="changing-scales">Changing scales</h2>
<pre><code>// Use the \scale key, pass in a Scale object
Pbind(\scale, Scale.minor, \degree, Pseq((1..10))).play;
Pbind(\scale, Scale.major, \degree, Pseq((1..10))).play;
Pbind(\scale, Scale.bhairav, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="available-scales">Available scales</h2>
<pre><code>// See all available scales
Scale.directory.postln
</code></pre>
<hr>
<h2 id="changing-root-note">Changing root note</h2>
<pre><code>// Use the \root key to transpose root note (halftones)
Pbind(\root, 0, \degree, Pseq((1..10))).play;
Pbind(\root, 1, \degree, Pseq((1..10))).play;
Pbind(\root, 2, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="changing-octaves">Changing octaves</h2>
<pre><code>// Use the \octave key
Pbind(\octave, Pseq([2,4,5],inf), \degree, Pseq((1..10))).play;
Pbind(\octave, Pwhite(3,6), \degree, Pseq((1..10))).play;
Pbind(\octave, 7, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="playing-chords">Playing chords</h2>
<pre><code>// Add an array of numbers to the degree parameter 
// to play several synths at the same time (as a chord)
Pbind(\degree, [0,2,5] + Pseq([2,4,5],inf), \dur, 0.25).play;
</code></pre>
<hr>
<h2 id="changing-tempo">Changing tempo</h2>
<p>The tempo of patterns are controlled by the TempoClock class You can
either create your own TempoClock or modify the default clock like below</p>
<pre><code>TempoClock.default.tempo_(0.5) // Half tempo
TempoClock.default.tempo_(0.25) // quarter tempo
TempoClock.default.tempo_(1) // normal tempo
</code></pre>
<hr>
<h2 id="learning-resources">Learning resources</h2>
<hr>
<h2 id="videos">Videos</h2>
<p>Tutorials by Eli Fieldsteel covering a range of subjects: <a href="https://www.youtube.com/watch?v=yRzsOOiJ_p4&amp;list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC">SuperCollider
Tutorials</a></p>
<hr>
<h2 id="books">Books</h2>
<h2 id="e-books">E-books</h2>
<ul>
<li><a href="https://ccrma.stanford.edu/~ruviaro/texts/A_Gentle_Introduction_To_SuperCollider.pdf">A gentle introduction to
SuperCollider</a></li>
<li><a href="https://leanpub.com/ScoringSound">Thor Magnussons Scoring Sound</a></li>
</ul>
<h2 id="paper-books">Paper books</h2>
<ul>
<li><a href="https://www.logos-verlag.de/cgi-bin/engbuchmid?isbn=4017&amp;lng=eng&amp;id=">Introduction to SuperCollider, Andrea
Valle</a></li>
<li><a href="https://mitpress.mit.edu/books/supercollider-book">The SuperCollider
Book</a></li>
</ul>
<hr>
<h2 id="community">Community</h2>
<ul>
<li><a href="http://scsynth.org/">scsynth.org</a></li>
<li><a href="http://sccode.org/">sccode.org</a></li>
<li><a href="https://scsynth.slack.com/">Slack</a></li>
<li><a href="https://talk.lurk.org/channel/supercollider">Lurk</a></li>
<li><a href="https://www.birmingham.ac.uk/facilities/ea-studios/research/supercollider/mailinglist.aspx">Mailing
list</a></li>
<li><a href="https://t.me/supercollider_en">Telegram</a></li>
<li><a href="https://t.me/supercollider_es">Telegram ES</a></li>
<li><a href="https://www.facebook.com/groups/supercollider/">Facebook</a></li>
</ul>
<hr>
<h2 id="awesome-supercollider">Awesome SuperCollider</h2>
<p>A curated list of SuperCollider stuff</p>
<p>Find inspiration and (a lot more) more resources here:</p>
<p><a href="https://github.com/madskjeldgaard/awesome-supercollider">Awesome
Supercollider</a></p>
<hr>
<h2 id="learning-to-code-advice">Learning to code: Advice</h2>
<ul>
<li>Practice 5 minutes every day</li>
<li>Set yourself goals: Make (small) projects</li>
<li>Use the community</li>
</ul>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Pattern workshop, Herlev Bibliotek 2019</title>
            <link>http://madskjeldgaard.dk/pattern-workshop-herlev-bibliotek-2019/</link>
            <pubDate>Wed, 06 Nov 2019 11:22:54 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/pattern-workshop-herlev-bibliotek-2019/</guid>
            <description>Here are the materials for the SuperCollider workshop at Herlev Bibliotek, Denmark, November 2019.
The SynthDef used for the workshop [can be downloaded here.][1]
Download slides here.
 SuperCollider workshop Herlev Bibliotek, Denmark, 2019  About me  Name: Mads Kjeldgaard Occupation: Composer and developer Work: The Norwegian Center for Technology and Art (Notam)    Notam  Development for art projects (hardware, software, tech and artistic guidance) Communities / meetups (SC meetup among others) Studios / 3D sound / VR / Visuals Courses   My practice  Computer music / livecoding Field recording 3D sound composition Sound environments   Contact info  mail: mail@madskjeldgaard.</description>
            <content type="html"><![CDATA[<p><img src="/img/small/workshop-herlev-2019.jpg" alt="alt"></p>
<p>Here are the materials for the SuperCollider workshop at Herlev Bibliotek, Denmark, November 2019.</p>
<p>The SynthDef used for the workshop [can be downloaded here.][1]</p>
<p><a href="/pdf/herlev-2019.pdf">Download slides here.</a></p>
<hr>
<h2 id="supercollider-workshop">SuperCollider workshop</h2>
<h3 id="herlev-bibliotek-denmark-2019">Herlev Bibliotek, Denmark, 2019</h3>
<hr>
<h2 id="about-me">About me</h2>
<ul>
<li>Name: Mads Kjeldgaard</li>
<li>Occupation: Composer and developer</li>
<li>Work: The Norwegian Center for Technology and Art (Notam)</li>
</ul>
<hr>
<p><img src="studio3.jpg" alt="studio3"></p>
<hr>
<h2 id="notam">Notam</h2>
<ul>
<li>Development for art projects (hardware, software, tech and artistic
guidance)</li>
<li>Communities / meetups (SC meetup among others)</li>
<li>Studios / 3D sound / VR / Visuals</li>
<li>Courses</li>
</ul>
<hr>
<h2 id="my-practice">My practice</h2>
<ul>
<li>Computer music / livecoding</li>
<li>Field recording</li>
<li>3D sound composition</li>
<li>Sound environments</li>
</ul>
<hr>
<h2 id="contact-info">Contact info</h2>
<ul>
<li>mail: <a href="mailto:mail@madskjeldgaard.dk">mail@madskjeldgaard.dk</a></li>
<li>web: <a href="http://madskjeldgaard.dk">madskjeldgaard.dk</a></li>
<li>github:
<a href="http://github.com/madskjeldgaard">github.com/madskjeldgaard</a></li>
</ul>
<hr>
<h2 id="design">Design</h2>
<hr>
<h2 id="short-history-of-supercollider">Short history of SuperCollider</h2>
<p>SC was designed by James McCartney as closed source proprietary software</p>
<p>Version 1 <a href="https://groups.google.com/forum/#!topic/comp.music.research/g2f9EcL1mUw">came out in 1996 based on a Max
object</a>
called Pyrite. Cost 250$+shipping and could only run on PowerMacs.</p>
<p>Became free open source software in 2002 and is now cross platform.</p>
<hr>
<h2 id="overview">Overview</h2>
<p>When you download SuperCollider, you get an application that consists of
3 separate programs:</p>
<ol>
<li>The IDE, a smart text editor</li>
<li>The SuperCollider language / client (<strong>sclang</strong>)</li>
<li>The SuperCollider sound server (<strong>scsynth</strong>)</li>
</ol>
<hr>
<h2 id="architecture">Architecture</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-server.png" alt="alt"></p>
<p>The client (language and interpreter) communicates with the server
(signal processing)</p>
<p>This happens over the network using Open Sound Control</p>
<hr>
<h2 id="multiple-servers">Multiple servers</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-multiple-servers.png" alt="alt"></p>
<p>This modular / networked design means one client can control many
servers</p>
<hr>
<h2 id="consequences-of-this-modular-design">Consequences of this modular design</h2>
<h2 id="each-of-supercolliders-components-are-replacable">Each of SuperCollider&rsquo;s components are replacable</h2>
<p>IDE &lt;&mdash;&gt; Atom, Vim, or Visual Studio</p>
<p>language &lt;&mdash;&gt; Python, CLisp, Javascript</p>
<p>server &lt;&mdash;&gt; Max/MSP, Ableton Live, Reaper</p>
<hr>
<h2 id="extending-supercollider">Extending SuperCollider</h2>
<p>The functionality of SuperCollider can be extended using external
packages</p>
<p>These are called Quarks and can be installed using SuperCollider itself</p>
<pre><code>// Install packages via GUI (does not contain all packages)
Quarks.gui;

// Install package outside of gui using URL
Quarks.install(&quot;https://github.com/madskjeldgaard/KModules&quot;);
</code></pre>
<hr>
<h2 id="sc-plugins">SC Plugins</h2>
<p><a href="https://supercollider.github.io/sc3-plugins/">SC3 Plugins</a> is a
collection of user contributed code, mostly for making sound</p>
<p>The plugins are quite essential (and of varying quality / maintenance)</p>
<hr>
<h1 id="ide">IDE</h1>
<hr>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/09/ide.png" alt="theide"></p>
<hr>
<h2 id="important-keyboard-shortcuts">Important keyboard shortcuts</h2>
<ul>
<li>Open help file for thing under cursor: <strong>Ctrl/cmd + d</strong></li>
<li>Evaluate code block: <strong>Ctrl/cmd + enter</strong></li>
<li>Stop all running code: <strong>Ctrl/cmd + .</strong></li>
<li>Start audio server: <strong>Ctrl/cmd + b</strong></li>
<li>Recompile: <strong>Ctrl/cmd + shift + l</strong></li>
<li>Clear post window: <strong>Ctrl/cmd + shift + p</strong></li>
</ul>
<hr>
<h2 id="the-ide-as-a-calculator">The IDE as a calculator</h2>
<p>SuperCollider is an interpreted language</p>
<p>This means we can &ldquo;live code&rdquo; it without waiting for it to compile</p>
<p>A good example of this is using it as a calculator</p>
<hr>
<h2 id="autocompletion">Autocompletion</h2>
<p>Start typing and see a menu pop up with suggestions (and help files)</p>
<hr>
<h2 id="the-status-line">The status line</h2>
<p>Shows information about system usage</p>
<p>Right click to see server options + volume slider</p>
<hr>
<h2 id="about-livecoding">About livecoding</h2>
<hr>
<h2 id="what-is-it">What is it?</h2>
<p>The act of using a piece of software, while you write/modify it</p>
<hr>
<h2 id="a-quote">A quote</h2>
<p>&ldquo;In live coding the performance is the process of soware development,
rather than its outcome.&rdquo; - Alex McLean, Artist-Programmers and
Programming Languages for the Arts, 2011</p>
<hr>
<h2 id="livecoding-isnt-special">Livecoding isn&rsquo;t special</h2>
<p>It is used all the time now in web design, science and software
development to prototype / finetune ideas interactively.</p>
<hr>
<h2 id="livecoding-supercollider">Livecoding SuperCollider</h2>
<p>Since SuperCollider is an interactive programming language and not a
compiled one (as opposed to Csound for example), you are in effect
always livecoding in SuperCollider.</p>
<hr>
<h2 id="livecoding-music-kind-of-special-after-all">Livecoding music: Kind of special after all</h2>
<p>Musical livecoding is intrinsically connected to improvisation.</p>
<p>It can be compared to playing a jazz concert on a guitar&hellip;</p>
<hr>
<h2 id="except">Except</h2>
<p>&hellip; You are actually building the guitar itself, while playing it.</p>
<hr>
<h2 id="quick-history-of-live-coding-music">Quick history of live coding music</h2>
<ul>
<li>Took off in the early 2000&rsquo;s</li>
<li>Around 2000: Slub started playing with screen projections</li>
<li>Around same time: TSpawn trick -&gt; Hot swapping code in SC</li>
</ul>
<hr>
<h2 id="general-strategies">General strategies</h2>
<ol>
<li>Building / reworking an instrument (using NodeProxy/Ndef)</li>
<li>Writing or modifying patterns (using ProxySpace/Pdef)</li>
<li>A mix of the above</li>
</ol>
<hr>
<h2 id="what-are-the-rules-of-live-coding">What are the rules of live coding?</h2>
<ul>
<li>There are none!</li>
<li>Do whatever you like!</li>
<li>Crush all conventions!</li>
</ul>
<hr>
<h2 id="about-patterns">About patterns</h2>
<hr>
<p>From the <a href="http://doc.sccode.org/Classes/Pattern.html">Pattern help
file</a>:</p>
<h3 id="the-pattern-classes-form-a-rich-and-concise-score-language-for-music">&ldquo;[The Pattern] classes form a rich and concise score language for music&rdquo;</h3>
<hr>
<h2 id="in-other-words">In other words:</h2>
<p>Patterns are used to sequence and compose music</p>
<hr>
<h2 id="abstracting-the-composition-process">Abstracting the composition process</h2>
<p>the conditions for a composition vs. a fixed composition</p>
<hr>
<h2 id="its-just-data">It&rsquo;s just data</h2>
<p>Easily transpose, stretch and warp the composition</p>
<hr>
<h2 id="duration-is-not-an-issue">Duration is not an issue</h2>
<p>Composing a 4 bar loop is not necessarily any more or less work than a 4
hour one</p>
<hr>
<h2 id="guides-in-the-help-system">Guides in the help system</h2>
<p>Patterns are pretty well documented in the help system:</p>
<ul>
<li><a href="http://doc.sccode.org/Browse.html#Streams-Patterns-Events%3EA-Practical-Guide">A practical
guide</a></li>
<li><a href="http://doc.sccode.org/Browse.html#Tutorials%3EStreams-Patterns-Events">Understanding Streams, Events and
Patterns</a></li>
</ul>
<hr>
<h2 id="event-patterns">Event patterns</h2>
<hr>
<h2 id="like-pressing-the-key-of-a-piano">Like pressing the key of a piano</h2>
<p>What data does that involve?</p>
<hr>
<ul>
<li>Duration of key press</li>
<li>Pitch of the key</li>
<li>Sustain (are you holding the foot pedal?)</li>
<li>etc. etc.</li>
</ul>
<hr>
<h2 id="what-an-event-looks-like">What an Event looks like</h2>
<pre><code>// See the post window when evaluating these
().play; // Default event
(freq:999).play; 
(freq:123, sustain: 8).play;
</code></pre>
<hr>
<h2 id="changing-the-default-synth">Changing the default synth</h2>
<p>The default synth sucks</p>
<p>You can change it by defining a new synth called \default</p>
<p>More info on <a href="https://www.madskjeldgaard.dk/how-to-change-the-default-synth-in-supercollider/">my
website</a></p>
<hr>
<h2 id="introducing-the-allmighty-pbind">Introducing the allmighty Pbind</h2>
<p>Arguably the most important pattern class in SuperCollider</p>
<hr>
<h2 id="pbind-data">Pbind data</h2>
<p>Pbind simply consists of a list of key/value pairs</p>
<hr>
<h2 id="keys-correspond-to-synth-arguments">Keys correspond to Synth arguments</h2>
<p>Most often, keys correspond to a Synth&rsquo;s arguments.</p>
<p>Example: If a SynthDef has the argument cutoff, we can access that
argument in a Pbind using \cutoff.</p>
<hr>
<h2 id="some-keys-are-special">Some keys are special</h2>
<hr>
<h1 id="dur">dur</h1>
<p>\dur is used in most SynthDef&rsquo;s to specify the duration of a note/event.</p>
<p>Make sure this key never gets the value 0.</p>
<hr>
<h2 id="stretch">stretch</h2>
<p>\stretch is used to stretch or shrink the timing of a Pbind</p>
<hr>
<h2 id="when-does-a-pbind-end">When does a Pbind end?</h2>
<p>If one of the keys of a Pbind are supplied with a fixed length value
pattern, the one running out of values first, will make the Pbind end.</p>
<hr>
<h2 id="livecoding-pdef">Livecoding: Pdef</h2>
<p>Livecoding patterns is easy. All you have to do is wrap your event
pattern (Pbind) in a Pdef:</p>
<pre><code>Pdef('myCoolPattern', Pbind(...)).play;
</code></pre>
<hr>
<h2 id="what-this-means">What this means</h2>
<p>The Pdef has a name (&lsquo;myCoolPattern&rsquo;) which is a kind of data slot
accessible throughout your system</p>
<p>Everytime you evaluate this code, it overwrites that data slot
(maintaining only one copy)</p>
<hr>
<h2 id="value-patterns">Value patterns</h2>
<hr>
<h2 id="the-building-blocks-of-compositions">The building blocks of compositions</h2>
<ul>
<li>List patterns</li>
<li>Random patterns</li>
<li>Envelope patterns</li>
<li>Rests</li>
<li>Data sharing between event parameters</li>
<li>Patterns in patterns</li>
</ul>
<hr>
<h2 id="list-patterns">List patterns</h2>
<p>See <a href="http://doc.sccode.org/Browse.html#Streams-Patterns-Events%3EPatterns%3EList">all of them
here</a></p>
<hr>
<h2 id="pseq-classic-sequencer">Pseq: Classic sequencer</h2>
<pre><code>// Play values 1 then 2 then 3
Pseq([1,2,3]);

// 4 to the floor
Pseq([1,1,1,1]);
</code></pre>
<hr>
<h2 id="testing-value-patterns-asstream">Testing value patterns: asStream</h2>
<p>You will see the .asStream method a lot in the documentation for value
patterns.</p>
<pre><code>// Pattern
p = Pseq([1,2,3]);

// Convert to stream
p = p.asStream;

// See what values the pattern produces
p.next; // 1, 2, 3, nil
</code></pre>
<hr>
<h2 id="random-value-patterns-pwhite-and-pbrown">Random value patterns: Pwhite and Pbrown</h2>
<pre><code>// (Pseudo) random values
Pwhite(lo: 0.0, hi: 1.0, length: inf);

// Drunk walk
Pbrown(lo: 0.0, hi: 1.0, step: 0.125, length: inf);
</code></pre>
<hr>
<h2 id="random-sequence-patterns-prand-and-pxrand">Random sequence patterns: Prand and Pxrand</h2>
<pre><code>// Randomly choose from a list
Prand([1,2,3],inf);

// Randomly choose from a list (no repeating elements)
Pxrand([1,2,3],inf);
</code></pre>
<hr>
<h2 id="probability-pwrand">Probability: Pwrand</h2>
<p>Choose items in a list depending on probability</p>
<pre><code>// 50/50 chance of either 1 or 10
Pwrand([1, 10], [0.5, 0.5])

// 25% chance of 1, 25% change of 3, 50% chance of 7
Pwrand([1, 3, 7], [0.25, 0.25, 0.5])

// 30% chance of 3, 40% change of 2, 30% chance of 5
Pwrand([4, 2, 5], [0.3, 0.4, 0.3])
</code></pre>
<hr>
<h2 id="envelope-pattern-pseg">Envelope pattern: Pseg</h2>
<pre><code>// Linear envelope from 1 to 5 in 4 beats
Pseg( levels: [1, 5], durs: 4, curves: \linear);

// Exponential envelope from 10 to 10000 in 8 beats 
Pseg( levels: [10, 10000], durs: 8, curves: \exp);
</code></pre>
<hr>
<h2 id="rest">Rest</h2>
<p>Skip/sleep a pattern using Rest. If used in the \dur key of a Pbind, the
value in the parenthesis is the sleep time</p>
<pre><code>// One beat, two beats, rest 1 beat, 3 beats
Pbind(\dur, Pseq([1,2,Rest(1),3])).play;
</code></pre>
<hr>
<h2 id="pkey-share-data-between-event-keys">Pkey: Share data between event keys</h2>
<p>Using Pkey we can make an event&rsquo;s parameters interact with eachother</p>
<pre><code>// The higher the scale degree
// ... the shorter the sound
Pbind(
    \degree, Pwhite(1,10),
    \dur, 1 / Pkey(\degree)
).play
</code></pre>
<p>More info about data sharing in patterns:
<a href="http://doc.sccode.org/Tutorials/A-Practical-Guide/PG_06g_Data_Sharing.html">here</a></p>
<hr>
<h2 id="patterns-in-patterns-the-computer-music-inception">patterns in patterns: The computer music inception</h2>
<p>You can put patterns in almost all parts of patterns.</p>
<p>This may lead to interesting results:</p>
<pre><code>// A sequence with 3 random values at the end
Pseq([1,2,Pwhite(1,10,3)]);

// An exponential envelope of random length
Pseg(levels: [10, 10000], durs: Pwhite(1,10), curves: \exp);
</code></pre>
<hr>
<h2 id="working-with-pitches-and-pbinds">Working with pitches and Pbinds</h2>
<hr>
<h2 id="pitch-model">Pitch model</h2>
<p><img src="http://doc.sccode.org/Classes/Event-default-note.png" alt="pitch model"></p>
<p><a href="http://doc.sccode.org/Classes/Event.html">Pitch model is described
here</a></p>
<hr>
<h2 id="changing-scales">Changing scales</h2>
<pre><code>// Use the \scale key, pass in a Scale object
Pbind(\scale, Scale.minor, \degree, Pseq((1..10))).play;
Pbind(\scale, Scale.major, \degree, Pseq((1..10))).play;
Pbind(\scale, Scale.bhairav, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="available-scales">Available scales</h2>
<pre><code>// See all available scales
Scale.directory.postln
</code></pre>
<hr>
<h2 id="changing-root-note">Changing root note</h2>
<pre><code>// Use the \root key to transpose root note (halftones)
Pbind(\root, 0, \degree, Pseq((1..10))).play;
Pbind(\root, 1, \degree, Pseq((1..10))).play;
Pbind(\root, 2, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="changing-octaves">Changing octaves</h2>
<pre><code>// Use the \octave key
Pbind(\octave, Pseq([2,4,5],inf), \degree, Pseq((1..10))).play;
Pbind(\octave, Pwhite(3,6), \degree, Pseq((1..10))).play;
Pbind(\octave, 7, \degree, Pseq((1..10))).play;
</code></pre>
<hr>
<h2 id="playing-chords">Playing chords</h2>
<pre><code>// Add an array of numbers to the degree parameter 
// to play several synths at the same time (as a chord)
Pbind(\degree, [0,2,5] + Pseq([2,4,5],inf), \dur, 0.25).play;
</code></pre>
<hr>
<h2 id="changing-tempo">Changing tempo</h2>
<p>The tempo of patterns are controlled by the TempoClock class You can
either create your own TempoClock or modify the default clock like below</p>
<pre><code>TempoClock.default.tempo_(0.5) // Half tempo
TempoClock.default.tempo_(0.25) // quarter tempo
TempoClock.default.tempo_(1) // normal tempo
</code></pre>
<hr>
<h2 id="learning-resources">Learning resources</h2>
<hr>
<h2 id="videos">Videos</h2>
<p>Tutorials by Eli Fieldsteel covering a range of subjects: <a href="https://www.youtube.com/watch?v=yRzsOOiJ_p4&amp;list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC">SuperCollider
Tutorials</a></p>
<hr>
<h2 id="books">Books</h2>
<h2 id="e-books">E-books</h2>
<ul>
<li><a href="https://ccrma.stanford.edu/~ruviaro/texts/A_Gentle_Introduction_To_SuperCollider.pdf">A gentle introduction to
SuperCollider</a></li>
<li><a href="https://leanpub.com/ScoringSound">Thor Magnussons Scoring Sound</a></li>
</ul>
<h2 id="paper-books">Paper books</h2>
<ul>
<li><a href="https://www.logos-verlag.de/cgi-bin/engbuchmid?isbn=4017&amp;lng=eng&amp;id=">Introduction to SuperCollider, Andrea
Valle</a></li>
<li><a href="https://mitpress.mit.edu/books/supercollider-book">The SuperCollider
Book</a></li>
</ul>
<hr>
<h2 id="community">Community</h2>
<ul>
<li><a href="http://scsynth.org/">scsynth.org</a></li>
<li><a href="http://sccode.org/">sccode.org</a></li>
<li><a href="https://scsynth.slack.com/">Slack</a></li>
<li><a href="https://talk.lurk.org/channel/supercollider">Lurk</a></li>
<li><a href="https://www.birmingham.ac.uk/facilities/ea-studios/research/supercollider/mailinglist.aspx">Mailing
list</a></li>
<li><a href="https://t.me/supercollider_en">Telegram</a></li>
<li><a href="https://t.me/supercollider_es">Telegram ES</a></li>
<li><a href="https://www.facebook.com/groups/supercollider/">Facebook</a></li>
</ul>
<hr>
<h2 id="awesome-supercollider">Awesome SuperCollider</h2>
<p>A curated list of SuperCollider stuff</p>
<p>Find inspiration and (a lot more) more resources here:</p>
<p><a href="https://github.com/madskjeldgaard/awesome-supercollider">Awesome
Supercollider</a></p>
<hr>
<h2 id="learning-to-code-advice">Learning to code: Advice</h2>
<ul>
<li>Practice 5 minutes every day</li>
<li>Set yourself goals: Make (small) projects</li>
<li>Use the community</li>
</ul>
<hr>
]]></content>
        </item>
        
        <item>
            <title>How to change the default synth in SuperCollider</title>
            <link>http://madskjeldgaard.dk/how-to-change-the-default-synth-in-supercollider/</link>
            <pubDate>Fri, 18 Oct 2019 12:42:12 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/how-to-change-the-default-synth-in-supercollider/</guid>
            <description>The default synth sound in SuperCollider is a cheesy old piano sound. If you have ever tried the event pattern examples in the documentation of SuperCollider or been in the process of testing some pattern specifics of your own, you will have heard this extremely unconvincing synthesizer:
A nice alternative: A triangle wave synth with a low pass filter Imagine a utopian world where the default cheese-piano-synth has been replaced by a nicer, kind of gameboy like synth.</description>
            <content type="html"><![CDATA[<p>The default synth sound in SuperCollider is a cheesy old piano sound. If you have ever tried the event pattern examples in the documentation of SuperCollider or been in the process of testing some pattern specifics of your own, you will have heard this extremely unconvincing synthesizer:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="a-nice-alternative-a-triangle-wave-synth-with-a-low-pass-filter">A nice alternative: A triangle wave synth with a low pass filter</h2>
<p>Imagine a utopian world where the default cheese-piano-synth has been replaced by a nicer, kind of gameboy like synth. Well that world is here and now.</p>
<p>Overwriting the default is actually easy. All you have to do is write a new SynthDef called <code>\default</code>. Evaluate this piece of code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">// A simple triangle wave synth in stereo 
</span><span style="color:#75715e"></span>(
<span style="color:#a6e22e">SynthDef</span>.<span style="color:#66d9ef">new</span>(<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span>, {
<span style="color:#a6e22e">arg</span> <span style="color:#a6e22e">dur</span>, <span style="color:#a6e22e">attack</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, <span style="color:#a6e22e">release</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1.0</span>,
<span style="color:#a6e22e">t_gate</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">out</span>, <span style="color:#a6e22e">freq</span><span style="color:#f92672">=</span><span style="color:#ae81ff">442</span>, <span style="color:#a6e22e">cutoff</span><span style="color:#f92672">=</span><span style="color:#ae81ff">5500</span>,
<span style="color:#a6e22e">rq</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pan</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, <span style="color:#a6e22e">amp</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0.5</span>;

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">env</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">EnvGen</span>.<span style="color:#a6e22e">kr</span>(
	<span style="color:#a6e22e">Env</span>.<span style="color:#a6e22e">perc</span>(<span style="color:#a6e22e">attack</span>, <span style="color:#a6e22e">release</span>), 
	<span style="color:#a6e22e">t_gate</span>, 
	<span style="color:#a6e22e">timeScale</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">dur</span>, 
	<span style="color:#a6e22e">doneAction</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>
);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">sig</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">DPW3Tri</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">freq</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">freq</span>, <span style="color:#a6e22e">mul</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">env</span>);
<span style="color:#a6e22e">sig</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">RLPF</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">cutoff</span>.<span style="color:#a6e22e">clip</span>(<span style="color:#ae81ff">20.0</span>, <span style="color:#ae81ff">20000.0</span>), <span style="color:#a6e22e">rq</span>.<span style="color:#a6e22e">clip</span>(<span style="color:#ae81ff">0.0</span>,<span style="color:#ae81ff">1.0</span>));
<span style="color:#a6e22e">sig</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Pan2</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">pan</span>);
<span style="color:#a6e22e">Out</span>.<span style="color:#a6e22e">ar</span>(<span style="color:#a6e22e">out</span>, <span style="color:#a6e22e">sig</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">amp</span>);
}).<span style="color:#a6e22e">add</span>;
)
</code></pre></div><p>Try this new default synth out by playing the default event again:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-smalltalk" data-lang="smalltalk">().play;
</code></pre></div><p>Isn’t that much better?</p>
<p>Now, let us try it with patterns:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="make-this-the-default-synth-permanently">Make this the default synth permanently</h2>
<p>To make this change permanent we need to edit the startup file for SuperCollider. This is a regular SuperCollider file that is evaluated on startup. It is a good place to keep settings and defaults. Here is how to access it:</p>
<ol>
<li>
<p>Open the SuperCollider IDE<!-- raw HTML omitted --></p>
</li>
<li>
<p>In the top menu, click “File”</p>
</li>
<li>
<p>In the drop down click “Open startup file”</p>
</li>
</ol>
<p>Now, if we just paste the code from above here, it will still get overwritten by the default synth when booting the server. To get around this, we need to add our synth after the server has booted. We do this by wrapping our SynthDef in a server function called doWhenBooted (<code>s.doWhenBooted{/* paste code here*/}</code>):</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Here is what the default synth should now sound like (with a bit of reverb of course)</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --><a href="https://www.madskjeldgaard.dk/wp-content/uploads/2019/10/new-default-synth.mp4">https://www.madskjeldgaard.dk/wp-content/uploads/2019/10/new-default-synth.mp4</a><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
]]></content>
        </item>
        
        <item>
            <title>Introduction to SuperCollider, Notam 2019</title>
            <link>http://madskjeldgaard.dk/scintro-notam-2019/</link>
            <pubDate>Sun, 01 Sep 2019 12:54:46 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/scintro-notam-2019/</guid>
            <description>Here you will find the material for the introductory workshop held at Notam, Oslo in late summer 2019.
The slides may be used as a sort of cheatsheet as well as notes for remembering the topics covered:
• An overview: What is SuperCollider and what can you do with it?
• The design and architecture of SuperCollider
• Language basics: syntax, variables, expressions and functions
• Learning resources: How to proceed from here</description>
            <content type="html"><![CDATA[<p>Here you will find the material for the introductory workshop held at Notam, Oslo in late summer 2019.</p>
<p>The slides may be used as a sort of cheatsheet as well as notes for remembering the topics covered:</p>
<p>• An overview: What is SuperCollider and what can you do with it?</p>
<p>• The design and architecture of SuperCollider</p>
<p>• Language basics: syntax, variables, expressions and functions</p>
<p>• Learning resources: How to proceed from here</p>
<p><a href="/pdf/supercollider-introduction-notam-2019-slides-3.pdf">Download the slides here.</a></p>
<hr>
<h2 id="about-me">about me</h2>
<hr>
<h2 id="who-am-i">Who am I?</h2>
<ul>
<li>Mads Kjeldgaard</li>
<li>Composer &amp; developer</li>
<li>Work at NOTAM</li>
</ul>
<hr>
<h2 id="contact-info">Contact info</h2>
<ul>
<li>website: madskjeldgaard.dk</li>
<li>github: github.com/madskjeldgaard</li>
<li>email: mail@madskjeldgaard.dk</li>
</ul>
<hr>
<h2 id="design">Design</h2>
<hr>
<h2 id="short-history-of-supercollider">Short history of SuperCollider</h2>
<p>SC was designed by James McCartney as closed source proprietary software</p>
<p>Version 1 <a href="https://groups.google.com/forum/#!topic/comp.music.research/g2f9EcL1mUw">came out in 1996 based on a Max
object</a>
called Pyrite. Cost 250$+shipping and could only run on PowerMacs.</p>
<p>Became free open source software in 2002 and is now cross platform.</p>
<hr>
<h2 id="overview">Overview</h2>
<p>When you download SuperCollider, you get an application that consists of
3 separate programs:</p>
<ol>
<li>The IDE, a smart text editor</li>
<li>The SuperCollider language (sclang)</li>
<li>The SuperCollider sound server (scsynth)</li>
</ol>
<hr>
<h2 id="architecture">Architecture</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-server.png" alt="alt"></p>
<p>The client (language and interpreter) communicates with the server
(signal processing)</p>
<p>This happens over the network using Open Sound Control</p>
<hr>
<h2 id="multiple-servers">Multiple servers</h2>
<p><img src="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/client-multiple-servers.png" alt="alt"></p>
<p>This modular / networked design means one client can control many
servers</p>
<hr>
<h2 id="consequences-of-this-modular-design">Consequences of this modular design</h2>
<h2 id="each-of-supercolliders-components-are-replacable">Each of SuperCollider&rsquo;s components are replacable</h2>
<p>IDE &lt;&mdash;&gt; Atom, Vim, or Visual Studio</p>
<p>language &lt;&mdash;&gt; Python, CLisp, Javascript</p>
<p>server &lt;&mdash;&gt; Max/MSP, Ableton Live, Reaper</p>
<hr>
<h2 id="syntax-strings-and-variables">Syntax, strings and variables</h2>
<hr>
<h2 id="hello-world">Hello world</h2>
<p>Use <code>.postln</code> to post something to the post window (important when
debugging):</p>
<p><code>&quot;Hello world&quot;.postln</code></p>
<hr>
<h2 id="an-important-point-on-numbers-in-sc">An important point on numbers in SC</h2>
<p>As opposed to mathematical convention: there is no hierarchy between
operators</p>
<p>If you pick up a calculator and type <code>2+2*10</code> the result is probably
<code>=22</code></p>
<p>Because normally there is an implicit parenthesis here: <code>2+(2*10)</code>.</p>
<p>This isn&rsquo;t the case in SuperCollider:</p>
<pre><code>2+2*10
-&gt; 40
</code></pre>
<hr>
<h2 id="using-brackets-to-create-mathematical-hiararchy">Using brackets to create mathematical hiararchy</h2>
<p>SC looks at the first part (<code>2+2</code>) and calculates it, then multiplies it
(<code>*10</code>).</p>
<p>Therefore: Always use parenthesis when you need mathematical hierarchy:</p>
<pre><code>2+(2*10)
-&gt; 22
</code></pre>
<hr>
<h2 id="syntax">Syntax</h2>
<p>Like with any other programming language, correct syntax is important.</p>
<p>When you get it wrong, the interpreter will give you an error (and thus
help you solve your problem)</p>
<p>If for example I wanted to write <code>9.cubed</code> but accidentally wrote
<code>9cubed</code> and evaluated it, I would get the following error</p>
<pre><code>RECEIVER: nil
ERROR: syntax error, unexpected NAME, expecting $end
  in interpreted text
  line 1 char 6:
  9cubed 
   ^^^^^
-----------------------------------
ERROR: Command line parse failed
-&gt; nil
</code></pre>
<hr>
<h2 id="brackets--parenthesis">Brackets / parenthesis</h2>
<p><code>()</code> encapsulates a block of code that is supposed to be executed
together <code>;</code> is used to mark the end of a statement</p>
<hr>
<p>An example of a block:</p>
<pre><code>(
a = 111+222+333;
b = 444+555+666;
c = 777+888+999;
)

a; // -&gt; 666
b; // -&gt; 1665
c; // -&gt; 2664
</code></pre>
<hr>
<h2 id="expressions">Expressions</h2>
<p>The end of an expression is marked by a semicolon <code>;</code></p>
<p>SC will interpret everything up until the semicolon as one expression</p>
<p>Example: Two expressions</p>
<pre><code>&quot;hello&quot;.postln; &quot;how are you?&quot;.postln;
</code></pre>
<p>This results in the following in the post window:</p>
<pre><code>hello
how are you?
-&gt; how are you?
</code></pre>
<hr>
<h2 id="receiver-notation">Receiver notation</h2>
<p>A way of executing a function (message) on an object (receiver)</p>
<p><code>Receiver.message(argument)</code></p>
<p>or</p>
<p><code>message(Receiver, argument)</code></p>
<p>Examples:</p>
<p><code>100.rand</code> same thing as <code>rand(100)</code></p>
<p><code>&quot;hello&quot;.postln</code> same thing as <code>postln(&quot;hello&quot;)</code></p>
<p><code>0.123.round(0.1)</code> same thing as <code>round(0.123, 0.1)</code></p>
<hr>
<h2 id="the-interpreter-doesnt-care-about-line-breaks">The interpreter doesn&rsquo;t care about line breaks</h2>
<pre><code>(
a = [1,2,3,4];
)
</code></pre>
<p>Is the same as this:</p>
<pre><code>(
a = [
    1,
    2,
    3,
    4
    ];
)
</code></pre>
<p>As long as you use semicolons at the end of your expressions</p>
<hr>
<h2 id="comments">Comments</h2>
<p><code>//</code> can be used as single line comments:
<code>// This comment is a one line comment</code> Or at the end of a line:
<code>10+10; // This comment is at the end of a line</code></p>
<p><code>/* */</code> is used for multiline comments. Everything between these is
treated as a comment.</p>
<pre><code>/*
Roses are red
Violets are blue
SuperCollider is cool
and so are you
*/ 
</code></pre>
<hr>
<h2 id="strings">Strings</h2>
<p>A string is marked by double quotes: <code>&quot;This is a string&quot;;</code></p>
<p>It is now a String object:</p>
<pre><code>&quot;This is a string&quot;.class 
-&gt; String
</code></pre>
<hr>
<h2 id="string-concatenation">String concatenation</h2>
<p>A common string operation is the concatenation of strings</p>
<p>This is done using the <code>++</code> operator:</p>
<pre><code>&quot;One&quot; ++ &quot;Two&quot; ++ &quot;Three&quot;;
-&gt; OneTwoThree
</code></pre>
<hr>
<h2 id="symbols">Symbols</h2>
<p>A symbol can be written by surrounding characters by single quotes (may
include whitespace):</p>
<p><code>'foo bar'</code></p>
<p>Or by a preceding backslash (then it may not include whitespace):</p>
<p><code>\foo</code></p>
<hr>
<h2 id="why-symbols">Why symbols</h2>
<p>From the Symbol help file: &quot;A symbol, like a String, is a sequence of
characters.</p>
<p>Unlike strings, two symbols with exactly the same characters will be the
exact same object.&quot;</p>
<p>Symbols are most often used to name things (like synthesizers,
parameters or patterns)</p>
<p>Tip: Use symbols to name things, use strings for input and output.</p>
<hr>
<h2 id="variables">Variables</h2>
<p>A variable is a container that you can store data in:</p>
<p><code>var niceNumber = 123456789;</code></p>
<hr>
<h2 id="variable-names">Variable names</h2>
<p>Variable names must be written with a lowercase first letter.</p>
<p>Like this: <code>var thisWorks</code> and not like this: <code>var ThisDoesNotWork</code></p>
<hr>
<h2 id="reserved-keywords">Reserved keywords</h2>
<p>Another limitation in naming variables: Reserved keywords</p>
<p>These are words used to identify specific things in SC: <code>nil</code>, <code>var</code>,
<code>arg</code>, <code>false</code>, <code>true</code></p>
<p>Example:</p>
<pre><code>var var
-&gt; nil
ERROR: syntax error, unexpected VAR, 
    expecting NAME or WHILE
  in interpreted text
  line 1 char 7:
  var var
      ^^^
</code></pre>
<hr>
<h2 id="local-variables">Local variables</h2>
<p>Local to a block of code</p>
<p>Must be initialized at the top of the block</p>
<hr>
<h2 id="environment-variables">Environment variables</h2>
<p>&ldquo;Global&rdquo; in scope, can be accessed throughout the environment</p>
<p>Don&rsquo;t need a <code>var</code> keyword in front of them when declared</p>
<p>Can be initiliazed at any point in the program</p>
<hr>
<h2 id="writing-environment-variables">Writing environment variables</h2>
<ol>
<li>
<p>The letters a-z: <code>a = [1,2,3,4,5,6]</code></p>
</li>
<li>
<p>The tilde (~) prefix <code>~array = [1,2,3,4,5,6]</code></p>
</li>
</ol>
<hr>
<h2 id="demonstration-of-variable-scope">Demonstration of variable scope</h2>
<pre><code>(
// local variable
var array = [1,2,3];

// This works:
array.postln;
)

// This returns a &quot;not defined&quot; error:
array.postln;
</code></pre>
<hr>
<h2 id="when-to-use-local-variables">When to use local variables</h2>
<p>Use local variables as often as possible</p>
<p>For example when designing a system, writing the insides of functions,
etc.</p>
<p>This will keep your code clean and make it easier for you to maintain</p>
<hr>
<h2 id="when-to-use-environment-variables">When to use environment variables</h2>
<p>Use environment variables for interactive coding</p>
<p>For example when prototyping or live coding</p>
<hr>
<h2 id="syntax-shortcuts">Syntax shortcuts</h2>
<p>SC allows the user to write code in different styles using different
types of syntax.</p>
<p>The helpfiles &ldquo;Syntax Shortcuts&rdquo; and &ldquo;Symbolic Notation&rdquo; can be a big
help when this becomes confusing</p>
<hr>
<h2 id="functions">Functions</h2>
<hr>
<h2 id="what-is-a-function">What is a function?</h2>
<p>A function is a reusable encapsulation of functionality</p>
<p>Lets you reuse and call it elsewhere in your code</p>
<p>Repetitive code can often be simplified with functions</p>
<hr>
<h2 id="functions-1">Functions</h2>
<p>The core of the function is contained in curly brackets: <code>{}</code></p>
<p>We declare a function like this. Note: This does not evaluate or
activate the function yet:</p>
<pre><code>{2+2}
-&gt; a Function
</code></pre>
<p>A function is evaluated by sending it the <code>.value</code> message:</p>
<pre><code>{2+2}.value
-&gt; 4
</code></pre>
<hr>
<h2 id="syntactic-sugar">Syntactic sugar</h2>
<p>Tip: <code>.value</code> can be omitted by just adding <code>.()</code> like so:
<code>{arg x, y; x+y}.(x:2, y:7)</code>, although <code>.value</code> is usually clearer</p>
<hr>
<h2 id="function-arguments">Function arguments</h2>
<p>Functions can take arguments (data) as input and do something with them.</p>
<p>Arguments must be declared in the beginning of the function.</p>
<p>To pass values to the arguments, open a parenthesis after <code>.value</code></p>
<p>Here we have named the argument <code>x</code></p>
<pre><code>{arg x; 2+x}.value(x: 8)
-&gt; 10
</code></pre>
<p>Alternatively, the argument name can be omitted (but then you have to
know the order of arguments):</p>
<pre><code>{arg x, y; x+y}.value(2, 8)
-&gt; 10
</code></pre>
<hr>
<h2 id="named">Named</h2>
<p>You can call arguments by their names:</p>
<pre><code>{arg x, y; x+y}.value(x:2, y:8)
-&gt; 10
</code></pre>
<hr>
<h2 id="mixing-named-and-unnamed-arguments">Mixing named and unnamed arguments</h2>
<p>You can mix named and unnamed arguments but you must call the unnamed
arguments at the end of the list</p>
<p><strong>correct way</strong>:</p>
<pre><code>{arg x=2, y; x+y}.value(2, y:8)
-&gt; 10
</code></pre>
<p><strong>incorrect way</strong>:</p>
<pre><code>{arg x=2, y; x+y}.value(x:2, 8)
ERROR: syntax error, unexpected INTEGER, expecting ')' in interpreted text
</code></pre>
<hr>
<h2 id="alternative-argument-syntax">Alternative argument syntax</h2>
<p>Instead of writing <code>arg argname1, argname2</code> you can put the arguments
inside pipe symbols:</p>
<pre><code>f = {|x, y| x+y}
</code></pre>
<hr>
<h2 id="argument-default-values">Argument default values</h2>
<p>You can set the initial value of an argument when declaring it:</p>
<pre><code>f = {|x=1, y=4| x+y}
</code></pre>
<hr>
<h2 id="declaring-multiple-arguments-or-variables-in-one-go">Declaring multiple arguments or variables in one go</h2>
<p>You can choose between declaring like this:
<code>arg argument1, argument2, argument3;</code></p>
<p>Or like this:</p>
<pre><code>arg argument1;
arg argument2;
arg argument3;
</code></pre>
<p>The same goes for local variables</p>
<hr>
<h2 id="functions-can-be-put-in-variables-and-reused">Functions can be put in variables and reused</h2>
<pre><code>f = {arg x, y; x + y};
f.value(2,1000); // = 1002
f.value(9,22); // = 31
</code></pre>
<hr>
<h2 id="function-returns">Function returns</h2>
<p>All blocks of code in SC return the result of the last statement (in
both <code>()</code> and <code>{}</code>)</p>
<p>This is useful for doing further computations</p>
<pre><code>f = {arg x, y; x + y};
a = f.value(2,1000); // = 1002
b = f.value(9,22); // = 31
a+b; // = 1033 
</code></pre>
<hr>
<h2 id="learning-resources">Learning resources</h2>
<hr>
<ul>
<li><a href="https://ccrma.stanford.edu/~ruviaro/texts/A_Gentle_Introduction_To_SuperCollider.pdf">A gentle introduction to
SuperCollider</a></li>
</ul>
<hr>
<h2 id="videos">Videos</h2>
<p>Tutorials by Eli Fieldsteel covering a range of subjects: -
<a href="https://www.youtube.com/watch?v=yRzsOOiJ_p4&amp;list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC">SuperCollider
Tutorials</a></p>
<p>James McCartney (author of SuperCollider) giving a talk at IRCAM: -
<a href="https://medias.ircam.fr/xb090dd_supercollider-and-time">SuperCollider and
Time</a></p>
<hr>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.logos-verlag.de/cgi-bin/engbuchmid?isbn=4017&amp;lng=eng&amp;id=">Introduction to
SuperCollider</a> -
Written by Andrea Valle, includes pdf. Published 2016.</li>
<li><a href="https://mitpress.mit.edu/books/supercollider-book">The SuperCollider
Book</a> &ndash; The
essential reference. Edited by Scott Wilson, David Cottle and Nick
Collins. Foreword by James McCartney. Published 2011.</li>
<li><a href="https://leanpub.com/ScoringSound">Thor Magnussons Scoring Sound</a> -
Cookbook containing synthesis recipes among other things</li>
<li><a href="https://archive.org/details/MappingAndVisualizationWithSuperCollider">Mapping and Visualization with
SuperCollider</a> -
Create interactive and repsonsive audio-visual applications with
SuperCollider</li>
</ul>
<hr>
<h2 id="community">Community</h2>
<ul>
<li><a href="http://scsynth.org/">scsynth.org</a></li>
<li><a href="http://sccode.org/">sccode.org</a></li>
<li><a href="https://scsynth.slack.com/">Slack</a></li>
<li><a href="https://talk.lurk.org/channel/supercollider">Lurk</a></li>
<li><a href="https://www.birmingham.ac.uk/facilities/ea-studios/research/supercollider/mailinglist.aspx">Mailing
list</a></li>
<li><a href="https://t.me/supercollider_en">Telegram</a></li>
<li><a href="https://t.me/supercollider_es">Telegram ES</a></li>
<li><a href="https://www.facebook.com/groups/supercollider/">Facebook</a></li>
</ul>
<hr>
<h2 id="awesome-supercollider">Awesome SuperCollider</h2>
<p>A curated list of SuperCollider stuff</p>
<p>Find inspiration and more resources here:</p>
<p><a href="https://github.com/madskjeldgaard/awesome-supercollider">Awesome
Supercollider</a></p>
]]></content>
        </item>
        
        <item>
            <title>Ambisonics tutorial: Binaural head rotation using Reaper, Hedrot and IEM Plugins</title>
            <link>http://madskjeldgaard.dk/ambisonics-tutorial-binaural-head-rotation-using-reaper-hedrot-and-iem-plugins/</link>
            <pubDate>Thu, 22 Aug 2019 08:56:36 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/ambisonics-tutorial-binaural-head-rotation-using-reaper-hedrot-and-iem-plugins/</guid>
            <description>Hedrot is an inexpensive head rotator that you can build yourself and attach to any pair of head phones, based on a small microcontroller (a Teensy) with an attached sensor board that measures your head’s rotation, pitch, tilt, etc.
Using the Hedrot, you can monitor a binaural version of an ambisonic mix in a pair of headphones and be able to move your head around inside the sound field.
In this tutorial we will cover how to set up the Hedrot application to send it’s sensor data via OSC to Reaper to rotate our ambisonic mix with our head movements.</description>
            <content type="html"><![CDATA[<p><a href="https://abaskind.github.io/hedrot/">Hedrot</a> is an inexpensive head rotator that you can build yourself and attach to any pair of head phones, based on a small microcontroller (a <a href="https://www.pjrc.com/teensy/">Teensy</a>) with an attached sensor board that measures your head’s rotation, pitch, tilt, etc.</p>
<p>Using the Hedrot, you can monitor a binaural version of an ambisonic mix in a pair of headphones and be able to move your head around inside the sound field.</p>
<p>In this tutorial we will cover how to set up the Hedrot application to send it’s sensor data via OSC to Reaper to rotate our ambisonic mix with our head movements.</p>
<p>The goal is to setup IEM’s SceneRotator plugin at the end of our ambisonic signal just before an instance of IEM’s BinauralDecoder plugin. We will then connect the SceneRotator to our head tracker to move the ambisonic sound field, as we move our head.</p>
<p>PS. Like most things ambisonics, I was introduced to this trick by <a href="https://github.com/balintlaczko">Bálint Laczkó</a>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before we begin, make sure you have the following software installed:</p>
<ul>
<li><a href="http://reaper.fm">Reaper</a></li>
<li><a href="https://plugins.iem.at/">IEM Plugins</a></li>
<li><a href="https://github.com/abaskind/hedrot">Hedrot</a></li>
</ul>
<p>Unfortunately, at the moment Hedrot only works on Windows and MacOS. Albeit if you feel adventurous and want to develop a Hedrot app for Linux, the source code is <a href="https://github.com/abaskind/hedrot">available here</a> .</p>
<p>You will also need a pair of studio headphones (not in-ear ones) and  <a href="https://github.com/abaskind/hedrot">a built Hedrot tracker</a> .</p>
<p>It is not necessary but advisable that you also read through and follow the <a href="https://plugins.iem.at/docs/tutorial_basicrouting/">Basic Routing tutorial</a>.</p>
<h2 id="setting-up-the-hedrotreceiver-application">Setting up the hedrotReceiver application</h2>
<p><img src="/img/small/hedrotReceiver.png" alt="receiver"></p>
<p>To get information from the head tracker you need to first connect it to your computer using a usb cable and then open up the hedrotReceiver application.</p>
<p>If it’s the first time you are using the headtracker, click on “Headtracker Settings”. In the new window, click on “reset all headtracker settings”</p>
<p>Then, press the “HEADTRACKER IS OFF” button to activate the head tracker. Make sure autodetect is on. You should now see the white box at the top of the app display a path to your headtracker.</p>
<p>Before setting anything up, you have to calibrate your head tracker. Click the “CALIBRATION” button on the main screen to enter the calibration settings.</p>
<h3 id="calibration">Calibration</h3>
<p><img src="/img/small/calibrationScreen.png" alt="calibration"></p>
<p>At the bottom of this screen, you can see how well your head tracker is performing. The normalized magnetometer and accelerometer readings in the bottom of the screen should ideally be somewhere around the center but they probably aren’t. If this is the first time you are using your head tracker, then you need to calibrate the accelerometer (only needed this one time) by clicking the “CALIBRATE ACCELEROMETER” button. Follow the steps written there and return to the calibration screen. Verify that the reading in the bottom middle of the screen is now somewhere around the middle.</p>
<p>Next, click the “CALIBRATE MAGNETOMETER” button to calibrate the magnetometer. Follow the steps in the next screen and return to the main calibration screen when you are done. Verify that the readings in the bottom left are now also around the middle, like your accelerometer.</p>
<p>Every time you attach your headrotator to a new pair of headphones, you need to recalibrate the magnetometer. The accelerometer only needs to be calibrated this one time (normally). That said, make it a happen to check the calibration every time you use the head tracker, often the magnetometer needs to be calibrated even though it hasn’t left the headphones.</p>
<h3 id="osc-settings">OSC settings</h3>
<p>Now it’s time to send the tracker’s data to Reaper. Click the “OSC settings” button on the main screen of hedrotReceiver.</p>
<p>The first thing we need to do, is figure where we are sending the data and modify the OSC patterns accordingly in hedrot.</p>
<p>The target for this data will be an instance of IEM’s SceneRotator plugin which you can <a href="https://plugins.iem.at/docs/osc/">control using OSC</a>. Change the yaw, pitch and roll OSC patterns to the following:</p>
<ul>
<li>yaw: <code>/SceneRotator/yaw</code></li>
<li>pitch: <code>/SceneRotator/pitch</code></li>
<li>roll: <code>/SceneRotator/roll</code></li>
</ul>
<p>There is no need to change the scaling/order setting in hedrot, because – as <a href="https://plugins.iem.at/docs/osc/">we can see in the IEM documentation</a> – SceneRotator expects values from -180 to 180 degrees, which is what hedrot puts out normally.</p>
<p>You can ignore the quaternion values in hedrot, as we won’t be using these.</p>
<p><em>Don’t change the port number just yet.</em></p>
<h2 id="setting-up-reaper">Setting up Reaper</h2>
<p>As mentioned at the beginning of this tutorial, it is recommended to follow the <a href="https://plugins.iem.at/docs/tutorial_basicrouting/">basic routing in Reaper tutorial</a>.</p>
<p>If you’re impatient though, just scroll to the bottom of that tutorial and download the Reaper templates.</p>
<p>Open up one of the Reaper templates ( in my case I’ve opened the third order template ). Now click the <code>Headphones</code> track and open it’s fx chain. Here you will find a BinauralDecoder instance. Choose headphone equalization here, if you need it.</p>
<p>Add an instance of SceneRotator to the <code>Headphones</code> just before the BinauralDecoder.</p>
<h3 id="set-up-scenerotator">Set up SceneRotator</h3>
<p>In your SceneRotator plugin instance, click the bottom OSC button to set up and open the network port that will receive the data from hedrotReceiver. Set it to 1234 or some other number you like. Click “open” to open this port. If you get a “Connection could not be established!” error, the port is probably used for something else. Try setting it to a different number and click open again.</p>
<p><em>Note: It is advised to always open the port in the plugin before setting it up in hedrot, as this will block the port.</em></p>
<h3 id="start-sending-osc-data-from-hedrot">Start sending OSC data from hedrot</h3>
<p>Back to hedrot. Open the OSC settings again and set the port number to 1234 or whatever number you put in as the port in SceneRotator. Click the red “do not transmit” buttons to activate transmission. Verify that you see values changing on the right side of your OSC settings window.</p>
<p><img src="/img/small/transmitting.png" alt="transmitting"></p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s it actually. Now you can play ambisonic material on one of the tracks in the <code>Ambisonic Bus</code> folder track. If you don’t have any on hand, you can add the Reaper JS plugin “Pink Noise Generator” and a StereoEncoder instance to one of those tracks and play around with it’s placement.</p>
<p>To save yourself the pain of repeating this laborous setup process, you can save your hedrot settings as a preset file in the hedrotReceiver application. You can also save the SceneRotator’s settings to make things easier. And finally, save your Reaper Project as a new template that now includes a head rotator.</p>
]]></content>
        </item>
        
        <item>
            <title>SuperCollider tutorial: Mass producing SynthDefs</title>
            <link>http://madskjeldgaard.dk/supercollider-tutorial-mass-producing-synthdefs/</link>
            <pubDate>Mon, 19 Aug 2019 10:36:35 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/supercollider-tutorial-mass-producing-synthdefs/</guid>
            <description>In SuperCollider, one of the most common ways of making sounds is by first defining a sort of recipe for a UGEN patch in a SynthDef and then from that recipe produce Synths that make sounds.
But when you write a SynthDef, the patch architecture cannot change after the definition (as opposed to changing arguments in the patch).
This becomes annoying when working with UGens that want to know the exact number of channels used, eg.</description>
            <content type="html"><![CDATA[<p>In SuperCollider, one of the most common ways of making sounds is by first defining a sort of recipe for a UGEN patch in a SynthDef and then from that recipe produce Synths that make sounds.</p>
<p>But when you write a SynthDef, the patch architecture cannot change after the definition (as opposed to changing arguments in the patch).</p>
<p>This becomes annoying when working with UGens that want to know the exact number of channels used, eg. <a href="http://doc.sccode.org/Classes/PlayBuf.html">PlayBuf</a>, when defining the Synth.</p>
<p>These kinds of UGEN arguments cannot be changed from the outside like other UGEN arguments, and so if you want to make a synth based on the PlayBuf buffer player UGEN, you have to make seperate versions for mono and stereo buffers because the <strong>numChannels</strong> argument is fixed on definition.</p>
<p>In the following, you will see how to mass producing SynthDefs in two different ways: One for simple multichannel enumeration (which can be seen used in the wild in projects such as <a href="https://github.com/musikinformatik/SuperDirt">SuperDirt</a>]) and another for more complex variations in patches.</p>
<p>These are techniques that I use extensively myself to help me organize my synth library (see <a href="https://github.com/madskjeldgaard/kmodules">KModules</a>) and they can help you unclutter and shrink your own library as well.</p>
<h1 id="first-technique-multichannel-enumeration">First technique: Multichannel enumeration</h1>
<p>When you need to create synths and you want it to be flexible in terms of the number of channels involved, a nice way of doing it involves the almighty <em>do</em> function.</p>
<p>The trick here is basically to put the SynthDef inside of a do function, which will repeat 64 times. We will then use the index from the do process to append to the SynthDef’s name and set the ugens to the appropriate amount of channels.</p>
<p>Let’s start by making the function to be used inside of the SynthDef:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>As you can see, the synth function is wrapped in an outer function which takes one argument: the number of channels. The function returns the actual synth function we need to put inside of a SynthDef.</p>
<p>Using the numchans argument, the PlayBuf UGEN is set to appropriate channel number (and the Out UGEN is smart enough to adjust to this).</p>
<p>The next step is to put this function inside of a SynthDef and call it 64 times. One time for each number of channels we want to have:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Now, whenever you need to use this synthdef, you can call it by it’s basename (“bufplayer” in this case) plus the number of channels. For example: A 33 channel buffer player would then look like <code>Synth(\bufplayer33, [\buffer, b])</code>.</p>
<h1 id="second-technique-synthdefwrap">Second technique: SynthDef.wrap</h1>
<p>In the beginning of this blog post I mentioned that the architecture of a SynthDef needs to be fixed upon definition. But there is a way around this which involves an amazing method in the SynthDef class called <a href="http://doc.sccode.org/Overviews/Methods.html#wrap">wrap</a>.</p>
<p>It may seem a bit hard to understand how it works at first, but once you have gotten the hold of it, wrap has mind blowing potential for quasi-dynamically making SynthDefs. In other words: semi-automatic sound patching.</p>
<p>Let us say we want to build a Synth which is a basic sawtooth based oscillator with a filter at the end. Now, SuperCollider contains a lot of different filters. Let us make a few different versions of this synth, all containing different filters.</p>
<p>We will organize the filter functions in an Event (which is a sort of Dictionary). When putting them in a data structure like this, we can easily get all of them using iteration.</p>
<p>Then, we will use a sort of do-function called <code>keysValuesDo</code> to get the filter names and functions and then for each of them create a SynthDef containing that particular filter.</p>
<h1 id="the-wrap-function-and-it8217s-arguments">The wrap function and it’s arguments</h1>
<p>When you add a function to your synthdef using .wrap like this, the outer SynthDef gets the arguments you defined in the filter functions. You do not have to define them with the freq argument of the synthdef itself because <strong>they will automatically be added to your synthdef</strong>. So our SynthDef will get a <code>cutoff</code> argument when we use SynthDef.wrap inside of it with our functions.</p>
<p>The signal of our Saw oscillator is passed into the filter using the wrap-argument <em>prependArgs</em>.</p>
<p>This part of SynthDef.wrap is very important and a bit confusing too. Anything you pass in to the prependArgs argument will be put into the first argument(s) of the function used in the wrap-method.</p>
<p>The argument in question (in our case the <em>in</em> argument) will then be removed from the outer function’s list of arguments. The prepended argument is in other words overwritten and becomes unavailable to the outside SynthDef argument list.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Now, let us test these synths:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Once you have gotten into the habit of using SynthDef.wrap it really is a flexible and powerful way of making Synths which takes care of a lot of the plumbing you otherwise need to do whenever you write a SynthDef, and it allows you to really experiment with different patching ideas.</p>
<p>Note that, in the example above, whenever you add a filter function to the dictionary at the top, it will automatically be added as another SynthDef.</p>
<p>Another cool thing about SynthDef.wrap is that you can actually use it inside of NodeProxies and Ndefs as well when livecoding.</p>
]]></content>
        </item>
        
        <item>
            <title>SuperCollider tutorial: Easily render generative compositions as sound files using NRT</title>
            <link>http://madskjeldgaard.dk/supercollider-how-to-render-patterns-as-sound-files-using-nrt/</link>
            <pubDate>Mon, 05 Aug 2019 17:46:09 +0000</pubDate>
            
            <guid>http://madskjeldgaard.dk/supercollider-how-to-render-patterns-as-sound-files-using-nrt/</guid>
            <description>One of the many powerful features of SuperCollider is it’s ability to render sounds offline. This is called Non-Realtime Synthesis (NRT). NRT is for example useful for fast, offline processing of sounds, doing sound analysis or rendering generative compositions.
NRT works like this (normally): First you write a list of server OSC messages (stored in a Score usually) which will tell the (offline) server what to do at what point in time when you decide to render it.</description>
            <content type="html"><![CDATA[<p><img src="/wp-content/uploads/2019/08/supercollider-laptop-room-e1566211773173.jpg" alt="alt"></p>
<p>One of the many powerful features of SuperCollider is it’s ability to render sounds offline. This is called <a href="http://doc.sccode.org/Guides/Non-Realtime-Synthesis.html">Non-Realtime Synthesis (NRT)</a>. NRT is for example useful for fast, offline processing of sounds, doing sound analysis or rendering generative compositions.</p>
<p>NRT works like this (normally): First you write a list of server OSC messages (stored in a <a href="http://doc.sccode.org/Classes/Score.html">Score</a> usually) which will tell the (offline) server what to do at what point in time when you decide to render it. These are in the format [beat, [osc_command]]. An example: Making a Synth using synthdef \boring_sine at beat number 2 looks like this in such a OSC form: [2.0, [\s_new, \boring_sine, 1001, 0, 0]]</p>
<p>All of the possible server osc message commands are documented here: <a href="http://doc.sccode.org/Reference/Server-Command-Reference.html">Server Command Reference</a></p>
<p>Creating such a list manually is naturally time consuming and does not feel very smart. It is also a very awkward way of writing music.</p>
<p>Fortunately, there are ways of doing this in a more efficient and musical way.</p>
<h1 id="recording-event-patterns">Recording event patterns</h1>
<p>One of my favourite techniques is to simply convert Event Patterns (such as Pbind, Pmono, etc.) to scores using the .asScore method.</p>
<p>The process can be divided into the following steps:</p>
<ol>
<li>
<p>Make a SynthDef and store it on your system using .store</p>
</li>
<li>
<p>Write an event pattern</p>
</li>
<li>
<p>Convert the event pattern to a Score object using .asScore</p>
</li>
<li>
<p>Render the Score to a sound file on your system</p>
</li>
</ol>
<p>First step is to make a SynthDef. SynthDefs are sort of recipes for sound patches that the server uses to make sound. In this case, it will be a very boring sine, aptly named \boring_sine. Note the use of the .store method here. This will save the synthdef as a file on your system and make it available to the NRT process later on.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>We will keep the pattern super simple: Random scale degrees played using our \boring_sine synth, each of which a quarter of beat in duration.</p>
<p>The total duration of the pattern will be infinite for now (the length of this will automatically be truncated by the Score conversion process).</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>And now, let us convert this to a score:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Finally, we render the score</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h1 id="lets-make-this-interesting-iteration">Lets make this interesting: Iteration</h1>
<p><a href="https://www.madskjeldgaard.dk/wp-content/uploads/2019/08/sc-render-chopped2.png"><!-- raw HTML omitted --></a></p>
<p>Rendering one random melody is quite nice, but let us exploit the fact that our pattern chooses random scale degrees every time we play it and combine that functionality with iteration to make 10 (or any number) of rendered random melodies.</p>
<p>First, let us wrap what we wrote up until this point in a function that we can call as often as we want.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Let us keep the pattern as is</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>And then render 10 versions of it</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
        </item>
        
    </channel>
</rss>
